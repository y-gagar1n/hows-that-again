{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/mvc-modules-handlers","result":{"data":{"markdownRemark":{"html":"<h1 id=\"aspnet-mvc---http-modules-and-handlers\" style=\"position:relative;\"><a href=\"#aspnet-mvc---http-modules-and-handlers\" aria-label=\"aspnet mvc   http modules and handlers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ASP.NET MVC - HTTP modules and handlers</h1>\n<p>Модули и хэндлеры позволяют общаться напрямую с HTTP-запросом. Каждый запрос проходит через несколько модулей (сессия, аутентификация и пр.), а потом обрабатывается одним хэндлером и снова проходит через все модули.</p>\n<p>Чтобы сделать свой модуль, нужно реализовать интерфейс IHttpModule, имеющий 2 метода: Init(HttpApplication) и Dispose.</p>\n<p>Класс HttpApplication содержит 22 разных события, соответствующие различным этапам жизни запроса, на которые можно подписаться в методе Init.</p>\n<p>Все, что мы делаем в модуле, можно сделать и в Global.asax, однако тогда мы не сможем переиспользовать модуль в других приложениях.</p>\n<p>Хэндлеры обрабатывают индивидуальные запросы. Хэндлеры реализуют интерфейс IHttpHandler. Главный метод в нем - ProcessRequest(HttpContext context) В web.config можно настроить какой запрос идет к какому хэндлеру, основываясь на глаголе, пути и типе запроса.</p>\n<p>Начиная с ASP.NET 4.5 можно писать асинхронные хэндлеры и модули. Чтобы использовать асинхронные методы в HttpApplication, нужно вызывать методы .Add...Async и передавать внутрь делегаты начала и конца обработки.</p>\n<p>Чтобы реализовать асинхронный хэндлер, нужно унаследоваться от HttpTaskAsyncHandler и переопределить метод ProcessRequestAsync.</p>\n<h2 id=\"что-выбрать\" style=\"position:relative;\"><a href=\"#%D1%87%D1%82%D0%BE-%D0%B2%D1%8B%D0%B1%D1%80%D0%B0%D1%82%D1%8C\" aria-label=\"что выбрать permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Что выбрать</h2>\n<p>Хэндлеры стоит выбирать, когда тот или иной способ обработки запроса зависит от url/расширения. Если же нужно обрабатывать каждый запрос, независимо от url, то нужно выбрать модуль.</p>","frontmatter":{"path":"/blog/mvc-modules-handlers","title":"ASP.NET MVC - HTTP modules and handlers"}}},"pageContext":{}},"staticQueryHashes":["3649515864"]}