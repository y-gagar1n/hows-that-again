{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/qemu","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://losst.ru/kak-polzovatsya-qemu\">https://losst.ru/kak-polzovatsya-qemu</a></p>\n<h1 id=\"qemu\" style=\"position:relative;\"><a href=\"#qemu\" aria-label=\"qemu permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QEMU</h1>\n<h2 id=\"запуск-обычной-убунты\" style=\"position:relative;\"><a href=\"#%D0%B7%D0%B0%D0%BF%D1%83%D1%81%D0%BA-%D0%BE%D0%B1%D1%8B%D1%87%D0%BD%D0%BE%D0%B9-%D1%83%D0%B1%D1%83%D0%BD%D1%82%D1%8B\" aria-label=\"запуск обычной убунты permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Запуск обычной убунты</h2>\n<p>Разберем, как запустить убунту в qemu.</p>\n<ol>\n<li>Качаем образ убунты. Например, <a href=\"https://releases.ubuntu.com/18.04.5/\">отсюда</a> - нам нужен .iso файл.</li>\n<li>Создаем диск для нашей виртуалки:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">qemu-img create -f qcow2 ubuntu.qcow 10G</code></pre></div>\n<ol start=\"3\">\n<li>Запускаемся с образа убунты:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">qemu-system-x86_64 -hda ubuntu.qcow -boot d -cdrom ./ubuntu-18.04.5-live-server-amd64.iso -m <span class=\"token number\">640</span></code></pre></div>\n<ol start=\"4\">\n<li>Запускается стандартная установка, дожидаемся окончания, после чего запускать можно так:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">qemu-system-x86_64 -hda ubuntu.qcow -m <span class=\"token number\">640</span></code></pre></div>\n<p>Чтобы работало быстрее, рекомендуется включать полную виртуализацию флагом <code class=\"language-text\">-enable-kvm</code>.</p>\n<h2 id=\"запуск-и-дебаг-своего-ядра\" style=\"position:relative;\"><a href=\"#%D0%B7%D0%B0%D0%BF%D1%83%D1%81%D0%BA-%D0%B8-%D0%B4%D0%B5%D0%B1%D0%B0%D0%B3-%D1%81%D0%B2%D0%BE%D0%B5%D0%B3%D0%BE-%D1%8F%D0%B4%D1%80%D0%B0\" aria-label=\"запуск и дебаг своего ядра permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Запуск и дебаг своего ядра</h2>\n<p><a href=\"http://nickdesaulniers.github.io/blog/2018/10/24/booting-a-custom-linux-kernel-in-qemu-and-debugging-it-with-gdb/\">http://nickdesaulniers.github.io/blog/2018/10/24/booting-a-custom-linux-kernel-in-qemu-and-debugging-it-with-gdb/</a></p>\n<p>В статье по ссылке в самом начале рабочий скрипт:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># one time setup</span>\n$ mkinitramfs -o ramdisk.img\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"add-auto-load-safe-path path/to/linux/scripts/gdb/vmlinux-gdb.py\"</span> <span class=\"token operator\">>></span> ~/.gdbinit\n\n<span class=\"token comment\"># one time kernel setup</span>\n$ <span class=\"token builtin class-name\">cd</span> linux\n$ ./scripts/config -e DEBUG_INFO -e GDB_SCRIPTS\n$ <span class=\"token operator\">&lt;</span>make kernel image<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># each debug session run</span>\n$ qemu-system-x86_64 <span class=\"token punctuation\">\\</span>\n  -kernel arch/x86_64/boot/bzImage <span class=\"token punctuation\">\\</span>\n  -nographic <span class=\"token punctuation\">\\</span>\n  -append <span class=\"token string\">\"console=ttyS0 nokaslr\"</span> <span class=\"token punctuation\">\\</span>\n  -initrd ramdisk.img <span class=\"token punctuation\">\\</span>\n  -m <span class=\"token number\">512</span> <span class=\"token punctuation\">\\</span>\n  --enable-kvm <span class=\"token punctuation\">\\</span>\n  -cpu <span class=\"token function\">host</span> <span class=\"token punctuation\">\\</span>\n  -s -S <span class=\"token operator\">&amp;</span>\n$ gdb vmlinux\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> target remote :1234\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> hbreak start_kernel\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> c\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> lx-dmesg</code></pre></div>\n<p>Тут важное дополнение - пока командная строка не завелась, если при инициализации выдается какая-то ошибка, то чтобы выйти, нужно нажать <code class=\"language-text\">Ctrl+a, c</code>, появится командная строка qemu, затем выходим по <code class=\"language-text\">q</code>.</p>","frontmatter":{"path":"/blog/qemu","title":"qemu"}}},"pageContext":{}},"staticQueryHashes":["3649515864"]}