{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/git","webpackCompilationHash":"4db6669e02d28ef65e0b","result":{"data":{"markdownRemark":{"html":"<h1>Git</h1>\n<p>Хороший сайт для изучения бранчинга: <a href=\"https://learngitbranching.js.org/\">https://learngitbranching.js.org/</a></p>\n<h2>Просмотр коммитов свой ветки</h2>\n<p>Предполагаем, что нас интересуют коммиты начиная с момента, когда мы форкнулись от ветки <code class=\"language-text\">master</code>:</p>\n<p><code class=\"language-text\">git log master..</code></p>\n<h2>Разные команды</h2>\n<p><code class=\"language-text\">git diff</code> - просмотр всех изменений, как в индексе так и вне</p>\n<p><code class=\"language-text\">git diff --cached</code> - просмотр только изменений в индексе</p>\n<p><code class=\"language-text\">git add &lt;file&gt;</code> - добавление файла в индекс</p>\n<p><code class=\"language-text\">git rm &lt;file&gt;</code> - удаление файла из индекса И с диска</p>\n<p><code class=\"language-text\">git rm &lt;file&gt; \\--cached</code> - удаление файла только из индекса, оставляя его на диске</p>\n<p>Если в файл уже были внесены изменения, то для удаления нужно сделать:</p>\n<p><code class=\"language-text\">git rm &lt;file&gt; -f</code></p>\n<p><code class=\"language-text\">git mv &lt;file_old&gt; &lt;file_new&gt;</code> - переименование файла. На самом деле гит не хранит метаданные и эта команда аналогична: <code class=\"language-text\">mv &lt;file_old&gt; &lt;file_new&gt; &amp; git rm &lt;fie_old&gt; &amp; git add &lt;file_new&gt;</code></p>\n<p><code class=\"language-text\">git log -p</code> - выводит лог с diff-ом изменений</p>\n<p><code class=\"language-text\">git log -2</code> - показывает только 2 последние записи лога</p>\n<p><code class=\"language-text\">git reset HEAD &lt;file&gt;</code> - исключение файла из индекса. При этом изменения в файле не откатываются!</p>\n<p><code class=\"language-text\">git reset --hard</code> - сбрасывает индекс и рабочую папку</p>\n<p><code class=\"language-text\">git reset --hard &lt;commit&gt;</code> - сбрасывает индекс, рабочую папку, а так же устанавливает HEAD текущего бранча на указанный коммит</p>\n<p><code class=\"language-text\">git checkout -- &lt;file&gt;</code> - отмена изменений в файле</p>\n<p><code class=\"language-text\">git clean -df</code> - откат untracked файлов, которых нет в .gitignore</p>\n<p><code class=\"language-text\">git clean -dfn</code> - откат untracked файлов, которых нет в .gitignore, но ничего не удаляет, только показывает что будет удалять</p>\n<p><code class=\"language-text\">git fetch &lt;remote&gt;</code> - получение метаинфы об удаленном репозитории, но пока без обновления на другую ревизию</p>\n<p>При клонировании адрес репозитория автоматически добавляется как origin</p>\n<p><code class=\"language-text\">git push origin master</code> - пуш в дефолтную ветку в origin</p>\n<p><code class=\"language-text\">git remote show &lt;remote&gt;</code> - показать информацию об удаленном репозитории</p>\n<p><code class=\"language-text\">git branch &lt;new-branch&gt;</code> - создать новую ветку</p>\n<p><code class=\"language-text\">git checkout &lt;branch-name&gt;</code> - переход на ветку</p>\n<p><code class=\"language-text\">git checkout -b &lt;new-branch&gt;</code> - создание и сразу переход на новую ветку</p>\n<p><code class=\"language-text\">git checkout master &amp; git merge &lt;branch&gt;</code> - мерж бранча в мастер</p>\n<p><code class=\"language-text\">git branch -d &lt;branch&gt;</code> - удаление бранча</p>\n<p><code class=\"language-text\">git mergetool</code> - использование графической утилиты для разрешения конфликтов</p>\n<p><code class=\"language-text\">git config --global alias.co checkout</code> - создание алиаса</p>\n<h2>Detached HEAD</h2>\n<p><strong>detached HEAD</strong> - состояние, когда сделан checkout на конкретный коммит и мы сейчас не на голове бранча. Опасность в том, что если в этом состоянии сделать коммит, то он не будет принадлежать ни к какому бранчу. Если после этого переключиться на другой бранч, то они вообще потеряются. Поэтому <strong>крайне рекомендуется</strong> коммиты из такого состояния делать только в новый именованный бранч.</p>\n<p>Пример:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">//сначала мы находимся в состоянии detached HEAD\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\".....\"</span> // делаем <span class=\"token string\">\"оторванный коммит\"</span>\n<span class=\"token function\">git</span> branch my-temporary-work // создаем новую ветку, как указатель на коммит, сделанный в предыдущей строчке\n<span class=\"token function\">git</span> checkout master\n<span class=\"token function\">git</span> merge my-temporary-work // мержим нашу ветку в мастер</code></pre></div>\n<p>Ветка в <em>git</em> — это плавающий указатель на коммит. у указателя нет и не может быть никакой «вершины». Специальный указатель <code class=\"language-text\">HEAD</code> вполне может указывать и не на ветку, а на конкретный коммит (т.н. <em>detached head</em> ), как в нашем случае.</p>\n<p>Хорошее объяснение на тему detached HEAD: <a href=\"https://ru.stackoverflow.com/a/543892\">https://ru.stackoverflow.com/a/543892</a></p>\n<h2>Squashing commits</h2>\n<p><code class=\"language-text\">git rebase -i HEAD~3</code> // 3 - это количество последних коммитов, которые надо засквошить</p>\n<p>После этого появится текстовый редактор с редактированием сценария ребейса. Самый ранний коммит в нем будет наверху. Пример:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file</code></pre></div>\n<p>Нужно отредактировать этот коммит следующим образом (поменять команду на squash у коммитов после первого):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pick f7f3f6d changed my name a bit \nsquash 310154e updated README formatting and added blame \nsquash a5f4a0d added cat-file</code></pre></div>\n<p>После этого все 3 коммита будут объединены в 1. Коммит f7f3f6d будет переписан - в него будут добавлены изменения коммитов 310154e и a5f4a0d.</p>\n<h2>Изменение состава файлов в предыдущем коммите</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> reset --soft HEAD^    // откатывает HEAD на предыдущий коммит, при этом все изменения последнего коммита остаются на диске и фигурируют в индексе\n<span class=\"token function\">git</span> reset HEAD path/to/unwanted_file // убираем ненужный файл из индекса\n<span class=\"token function\">git</span> commit -c ORIG_HEAD // коммитим еще раз с тем же сообщением, что и оригинальный коммит</code></pre></div>\n<p><a href=\"https://git%5C-\">https://git\\-</a> scm.com/book/ru/v1/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1 %8B- Git-%D0%9F%D0%B5%D1%80%D0%B5%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8</p>\n<h2>Перемещение одного коммита на другую ветку</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> checkout master\n<span class=\"token function\">git</span> cherry-pick <span class=\"token operator\">&lt;</span>commit ID of XX<span class=\"token operator\">></span></code></pre></div>\n<h2>Перемещение 3 последних коммитов из ветки master в новую ветку experiment</h2>\n<p>С начала ветки experiment у нас не существует</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> checkout master\n<span class=\"token function\">git</span> branch experiment // создаем на последнем коммите ветку experiment, сами же остаемся на master\n<span class=\"token function\">git</span> reset --hard HEAD~3 // перемещаем HEAD master'а на <span class=\"token number\">3</span> коммита назад. В результате у нас master указывает на старый коммит, а experiment - на самый последний\n<span class=\"token function\">git</span> checkout experiment // перемещаемся на последний коммит, но уже в рамках бранча experiment</code></pre></div>\n<p>В третьей строчке можно иначе:</p>\n<p><code class=\"language-text\">git branch -f master HEAD~3</code></p>\n<h2>Патчи:</h2>\n<p>Допустим, нужно сделать патч для коммита 96d262d9 и 2 патчей до него. Делается это так:</p>\n<p><code class=\"language-text\">git format-patch -3 96d262d9</code> // здесь 3 - это как раз количество коммитов</p>\n<p>Если сделать просто <code class=\"language-text\">git format-patch 85ad802</code>, то в патче будут все коммиты, начиная от первого <strong>после</strong> 85ad802 и заканчивая tip текущей ветки.</p>\n<p>Однако такой метод создат по 1 патчу на каждый коммит. Чтобы получить 1 файл, в котором все коммиты:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> <span class=\"token function\">diff</span> 85ad802 <span class=\"token operator\">></span> patch` <span class=\"token punctuation\">\\</span>- эта команда выведет все изменения **после**\nкоммита в файл patch.\n<span class=\"token function\">git</span> apply --stat <span class=\"token operator\">&lt;</span>путь к файлу патча<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>- вывести инфу об изменениях в патче\n<span class=\"token function\">git</span> apply --check <span class=\"token operator\">&lt;</span>путь к файлу патча<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>- проверить, накатится ли патч\n<span class=\"token function\">git</span> apply <span class=\"token operator\">&lt;</span>путь к файлу патча<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>- накатить патч</code></pre></div>\n<h2>Диффы</h2>\n<p>Чтобы сделать дифф между своей текущей веткй и другой (например, мастером):</p>\n<p><code class=\"language-text\">git diff master...current</code></p>\n<h2>Работа с пулл-реквестами в гитхабе</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> upstream <span class=\"token operator\">&lt;</span>https://github.com/y-gagar1n/autoprefixer<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>- добавление своего форка как нового ремоута под именем upstream\n\n<span class=\"token function\">git</span> fetch upstream - выкачивание изменений из своего форка\n\n<span class=\"token function\">git</span> checkout my-branch</code></pre></div>\n<h2>Изменение автора для прошлых коммитов</h2>\n<p>Сначала выставляем нового автора:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> config --local user.name y-gagar1n\n<span class=\"token function\">git</span> config --local user.email <span class=\"token string\">\"y.timofeyev@gmail.com\"</span></code></pre></div>\n<p>Затем интерактивно проходим по каждому коммиту и выставляем ему нового автора.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> rebase -i HEAD~N</code></pre></div>\n<p>где <code class=\"language-text\">N</code> - \"глубина\" самого старшего коммита, которому нужно сменить автора. Например, если нужно сменить трем последним, или третьему коммиту \"сверху\", то N=3.</p>\n<p>Выставляем <code class=\"language-text\">e</code> у тех коммитов, которые нам нужно отредактировать.</p>\n<p>Затем в цикле повторяем N раз:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> commit --amend --reset-author\n<span class=\"token function\">git</span> rebase --continue</code></pre></div>\n<h2>Пуш/пулл без ввода логина и пароля</h2>\n<p>Открываем .git/config</p>\n<p>В поле <code class=\"language-text\">url</code> должна быть запись следующего вида:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">url = ssh://git@github.com/y-gagar1n/dotfiles.git</code></pre></div>\n<p>Чтобы у коммита в гитхабе выставился правильный ник, отличный от установленного глобально на системе, нужно его указать дополнительно:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[user]                                                                                                                                                                                                   \nname = y-gagar1n                                                                                                                                                                                     \nemail = yggr1n@gmail.com</code></pre></div>","frontmatter":{"path":"/blog/git","title":"Git"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}