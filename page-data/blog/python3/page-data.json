{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/python3","webpackCompilationHash":"6643d77f6775b53cce65","result":{"data":{"markdownRemark":{"html":"<h1>Python 3</h1>\n<h2>SSL в requests</h2>\n<p>Если для доступа к каким-либо внутренним ресурсам нужно использовать самоподписанный сертификат, то придется немного поприседать</p>\n<h3>Python 3.5 и раньше</h3>\n<p>Нужно указать путь к самоподписанному сертификату в переменной окружения <code class=\"language-text\">REQUESTS_CA_BUNDLE</code></p>\n<h3>Python 3.6 (Mac OS X)</h3>\n<p>В Mac OS X Начиная с 3.6 requests использует центры сертификации, которые берет из модуля <code class=\"language-text\">certifi</code>.</p>\n<p>Поэтому чтобы добавить туда свой CA, нужно сделать так:</p>\n<p>Создаем скрипт import_ca.py:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> certifi\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># source: https://incognitjoe.github.io/adding-certs-to-requests.html</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n  cafile <span class=\"token operator\">=</span> certifi<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{}.pem'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> infile<span class=\"token punctuation\">:</span>\n    customca <span class=\"token operator\">=</span> infile<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>cafile<span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> outfile<span class=\"token punctuation\">:</span>\n    outfile<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>customca<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'That might have worked.'</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<p>Затем в шелле выполняем:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CERT_NAME</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>путь к сертификату CA без расширения<span class=\"token operator\">></span>\n\nopenssl x509 -in <span class=\"token variable\">$CERT_NAME</span>.crt -out <span class=\"token variable\">$CERT_NAME</span>.pem -outform PEM\npip3 <span class=\"token function\">install</span> certifi\npython3 ./import_ca.py <span class=\"token variable\">$CERT_NAME</span></code></pre></div>\n<p>Обязательно после этого нужно удалить свой <code class=\"language-text\">REQUESTS_CA_BUNDLE</code> из переменных окружения, иначе все еще будет использоваться неверный сертификат.</p>\n<p>Если используется venvs, то это нужно сделать для каждого виртуального окружения.</p>","frontmatter":{"path":"/blog/python3","title":"Python 3"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}