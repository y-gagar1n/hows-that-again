{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/python3","result":{"data":{"markdownRemark":{"html":"<h1 id=\"python-3\" style=\"position:relative;\"><a href=\"#python-3\" aria-label=\"python 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python 3</h1>\n<h2 id=\"ssl-в-requests\" style=\"position:relative;\"><a href=\"#ssl-%D0%B2-requests\" aria-label=\"ssl в requests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSL в requests</h2>\n<p>Если для доступа к каким-либо внутренним ресурсам нужно использовать самоподписанный сертификат, то придется немного поприседать</p>\n<h3 id=\"python-35-и-раньше\" style=\"position:relative;\"><a href=\"#python-35-%D0%B8-%D1%80%D0%B0%D0%BD%D1%8C%D1%88%D0%B5\" aria-label=\"python 35 и раньше permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python 3.5 и раньше</h3>\n<p>Нужно указать путь к самоподписанному сертификату в переменной окружения <code class=\"language-text\">REQUESTS_CA_BUNDLE</code></p>\n<h3 id=\"python-36-mac-os-x\" style=\"position:relative;\"><a href=\"#python-36-mac-os-x\" aria-label=\"python 36 mac os x permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python 3.6 (Mac OS X)</h3>\n<p>В Mac OS X Начиная с 3.6 requests использует центры сертификации, которые берет из модуля <code class=\"language-text\">certifi</code>.</p>\n<p>Поэтому чтобы добавить туда свой CA, нужно сделать так:</p>\n<p>Создаем скрипт import_ca.py:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> certifi\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> sys\n<span class=\"token comment\"># source: https://incognitjoe.github.io/adding-certs-to-requests.html</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n  cafile <span class=\"token operator\">=</span> certifi<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{}.pem'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> infile<span class=\"token punctuation\">:</span>\n    customca <span class=\"token operator\">=</span> infile<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>cafile<span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> outfile<span class=\"token punctuation\">:</span>\n    outfile<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>customca<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'That might have worked.'</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<p>Затем в шелле выполняем:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CERT_NAME</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>путь к сертификату CA без расширения<span class=\"token operator\">></span>\n\nopenssl x509 -in <span class=\"token variable\">$CERT_NAME</span>.crt -out <span class=\"token variable\">$CERT_NAME</span>.pem -outform PEM\npip3 <span class=\"token function\">install</span> certifi\npython3 ./import_ca.py <span class=\"token variable\">$CERT_NAME</span></code></pre></div>\n<p>Обязательно после этого нужно удалить свой <code class=\"language-text\">REQUESTS_CA_BUNDLE</code> из переменных окружения, иначе все еще будет использоваться неверный сертификат.</p>\n<p>Если используется venvs, то это нужно сделать для каждого виртуального окружения.</p>","frontmatter":{"path":"/blog/python3","title":"Python 3"}}},"pageContext":{}},"staticQueryHashes":["3649515864"]}