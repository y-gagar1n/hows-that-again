{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/books/stackframes","webpackCompilationHash":"4db6669e02d28ef65e0b","result":{"data":{"markdownRemark":{"html":"<h1>Stack Frames</h1>\n<h2>Executables and Libraries</h2>\n<p>Пусть у нас есть 2 файла.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//p1.c</span>\n\n<span class=\"token keyword\">int</span> g1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> g2<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> v1<span class=\"token operator\">=</span><span class=\"token number\">0x11</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>v1<span class=\"token operator\">+</span>g1<span class=\"token operator\">+</span>g2<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//p2.c</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> g1<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> g2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> v2<span class=\"token operator\">=</span><span class=\"token number\">0x22</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> v2<span class=\"token operator\">+</span>g1<span class=\"token operator\">+</span>g2<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Скомпилируем их:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gcc -c p1.c p2.c</code></pre></div>\n<p>Получаем файлы <strong>p1.o</strong> и <strong>p2.o</strong>. Посмотрим их таблицу символов:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nm p1.o\n                 U _f\t\t<span class=\"token comment\"># U = undefined, так как f не определена в p1.c</span>\n0000000000000034 D _g1\t\t<span class=\"token comment\"># D = data section, так как g1 определен </span>\n0000000000000004 C _g2\t\t<span class=\"token comment\"># C = common symbol, почти то же, что и undefined</span>\n0000000000000000 T _main\t<span class=\"token comment\"># T = text section, так как main - функция, определенная в p1.c</span>\n\n$ nm p2.o\n0000000000000000 T _f\t\t<span class=\"token comment\"># T = text section</span>\n                 U _g1\t\t<span class=\"token comment\"># U = undefined</span>\n0000000000000024 D _g2\t\t<span class=\"token comment\"># D = data section</span></code></pre></div>\n<p>В секции Text содержится код функций на ассемблере и его можно посмотреть вот так:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">objdump -D p1.o</code></pre></div>\n<p>Вывод objdump показывает, что в обоих объектных файлах адреса начинаются с 0, а это значит, что их нужно слинковать и в процессе отрелоцировать.</p>\n<p>В процессе работы линкера имена переменных исчезают, заменяясь адресами в памяти.</p>\n<p>Слинкуем наши объектные файлы:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ld -o t1.bin p1.o p2.o</code></pre></div>\n<p>На маке правда пришлось указать пару дополнительных параметров:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ld -o t1.bin p1.o p2.o -lSystem -macosx_version_min <span class=\"token number\">10.14</span> </code></pre></div>\n<p>Проверим, что получилось:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nm t1.bin\n0000000000001000 A __mh_execute_header\n0000000000001fa0 T _f\n0000000000002000 D _g1\n0000000000002004 D _g2\n0000000000001f60 T _main\n                 U dyld_stub_binder</code></pre></div>\n<p>Как видим, здесь все наши функции и переменные на месте.</p>\n<p>Однако чтобы подключить все необходимые библиотеки, нужно в <strong>ld</strong> указать еще кучу всяких флагов, поэтому проще восползоваться <strong>gcc</strong>, чтобы он сам их указал:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gcc -o t1.bin p1.o p2.o`</code></pre></div>\n<p>Если хотим слинковать все статически (на маке не работает\t):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gcc -static -o t1.bin p1.o p2.o`</code></pre></div>\n<p>Можно указать флаг <code class=\"language-text\">-v</code> чтобы увидеть, с какими аргум ентами вызывается <strong>ld</strong>.</p>\n<p>Cкомпилим наш код как разделяемую библиотеку:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gcc -fpic -shared -o libp2.so p2.c\n$ gcc -o p.bin p1.c -L<span class=\"token string\">\".\"</span> -lp2\n$ <span class=\"token assign-left variable\">LD_LIBRARY_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\".\"</span> ./p.bin\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span>\t<span class=\"token comment\"># 57</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">-fpic</code> - указывает создать position-independent code, это код, который может быть загружен в память в произвольный адрес без необходимости релоцироваться</li>\n<li><code class=\"language-text\">-shared</code> - указывает создать динамическую библиотеку</li>\n<li><code class=\"language-text\">-o libp2.so</code> - указывает целевой файл, имя составляется по правилу <code class=\"language-text\">lib+name+.so+.version</code></li>\n<li><code class=\"language-text\">-L&quot;.&quot;</code> - линкуем текущую директорию, чтобы либы-зависимости искались в ней</li>\n<li><code class=\"language-text\">-lp2</code> - указывает слинковать с библиотекой <code class=\"language-text\">libp2.so</code>, чье имя будет составлено автоматически</li>\n<li><code class=\"language-text\">LD_LIBRARY_PATH</code> - нужна, чтобы указать адрес, в котором искать зависимость <code class=\"language-text\">libp2.so</code>, иначе она будет искаться в стандартных папках, перечисленных в <code class=\"language-text\">/etc/ld.so.conf</code>.</li>\n</ul>\n<p>Теперь, если сделать <code class=\"language-text\">objdump -d p.bin</code> или <code class=\"language-text\">nm p.bin</code>, то мы увидим, что в ней есть <strong>main</strong>, но нет <strong>f</strong>. </p>\n<p>А вот в <code class=\"language-text\">nm libp2.so</code> функция <strong>f</strong> есть!</p>","frontmatter":{"path":"/blog/books/stackframes","title":"Stack Frames"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}