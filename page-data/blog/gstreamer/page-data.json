{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/gstreamer","webpackCompilationHash":"f15e74f254d1c24b0dc1","result":{"data":{"markdownRemark":{"html":"<h1>Gstreamer</h1>\n<p><a href=\"https://habr.com/ru/post/251427/\">https://habr.com/ru/post/251427/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">#include <span class=\"token operator\">&lt;</span>gst<span class=\"token operator\">/</span>gst<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\nint main <span class=\"token punctuation\">(</span>int argc<span class=\"token punctuation\">,</span> char <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tg_print <span class=\"token punctuation\">(</span><span class=\"token string\">\"Syntax error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tGstElement <span class=\"token operator\">*</span>pipeline<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* Сюда будет читаться результат попытки запуска потока. */</span>\n\tGstStateChangeReturn ret<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* bus - это шина конвейера. Через нее мы можем получать сообщения о событиях. */</span>\n\tGstBus <span class=\"token operator\">*</span>bus<span class=\"token punctuation\">;</span>\n\tGstMessage <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Инициализация GStreamer */</span>\n\tgst_init <span class=\"token punctuation\">(</span>NULL<span class=\"token punctuation\">,</span> NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Создаем элементы */</span>\n\tpipeline <span class=\"token operator\">=</span> gst_element_factory_make <span class=\"token punctuation\">(</span><span class=\"token string\">\"pipeline\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pipe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsrc <span class=\"token operator\">=</span> gst_element_factory_make <span class=\"token punctuation\">(</span><span class=\"token string\">\"filesrc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdst <span class=\"token operator\">=</span> gst_element_factory_make <span class=\"token punctuation\">(</span><span class=\"token string\">\"filesink\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dst\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>pipeline <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>src <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>dst <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tg_printerr <span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to create some elements\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/* Добавляем элементы в конвейер */</span>\n\tgst_bin_add_many <span class=\"token punctuation\">(</span><span class=\"token function\">GST_BIN</span><span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* И связываем их */</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> gst_element_link <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> TRUE <span class=\"token punctuation\">)</span> \t<span class=\"token punctuation\">{</span>\n\t\tg_printerr <span class=\"token punctuation\">(</span><span class=\"token string\">\"Elements can not be linked\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tgst_object_unref <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/* Задаем элементам свойства */</span>\n\tg_object_set <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token string\">\"location\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tg_object_set <span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> <span class=\"token string\">\"location\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Запускаем конвейер */</span>\n\tret <span class=\"token operator\">=</span> gst_element_set_state <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">,</span> GST_STATE_PLAYING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> ret <span class=\"token operator\">==</span> GST_STATE_CHANGE_FAILURE <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tg_printerr <span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to set pipeline to the playing state\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tgst_object_unref <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/* Мало просто установить режим PLAYING. Нужно ждать либо конца потока, либо \n\t * ошибок. Для начала подключаемся к шине конвейера (эти манипуляции будут \n\t * описаны в следующей статье) */</span>\n\tbus <span class=\"token operator\">=</span> gst_element_get_bus <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* И ожидаем события на шине. Когда событие произойдет, функция вернет \n\t * сообщение, которое мы будем парсить. */</span>\n\tmsg <span class=\"token operator\">=</span> gst_bus_timed_pop_filtered <span class=\"token punctuation\">(</span>bus<span class=\"token punctuation\">,</span> GST_CLOCK_TIME_NONE<span class=\"token punctuation\">,</span> GST_MESSAGE_ERROR <span class=\"token operator\">|</span> GST_MESSAGE_EOS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Парсим сообщение */</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg <span class=\"token operator\">!=</span> NULL<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tGError <span class=\"token operator\">*</span>err<span class=\"token punctuation\">;</span>\n\t\tgchar <span class=\"token operator\">*</span>debug_info<span class=\"token punctuation\">;</span>\n\n\t\tswitch <span class=\"token punctuation\">(</span> GST_MESSAGE_TYPE <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tcase GST_MESSAGE_ERROR<span class=\"token punctuation\">:</span>\n\t\t\t\tgst_message_parse_error <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>debug_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tg_printerr <span class=\"token punctuation\">(</span><span class=\"token string\">\"Error received from element %s: %s\\n\"</span><span class=\"token punctuation\">,</span> GST_OBJECT_NAME <span class=\"token punctuation\">(</span>msg<span class=\"token operator\">-</span><span class=\"token operator\">></span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token operator\">-</span><span class=\"token operator\">></span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tg_printerr <span class=\"token punctuation\">(</span><span class=\"token string\">\"Debugging information: %s\\n\"</span><span class=\"token punctuation\">,</span> debug_info <span class=\"token operator\">?</span> debug_info <span class=\"token punctuation\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tg_clear_error <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tg_free <span class=\"token punctuation\">(</span>debug_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t\tcase GST_MESSAGE_EOS<span class=\"token punctuation\">:</span>\n\t\t\t\tg_print <span class=\"token punctuation\">(</span><span class=\"token string\">\"We reach End-Of-Stream\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t\tdefault<span class=\"token punctuation\">:</span>\n\t\t\t\tg_printerr <span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected message received\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tgst_message_unref <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/* Освобождаем ресурсы */</span>\n\tgst_object_unref <span class=\"token punctuation\">(</span>bus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tgst_element_set_state <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">,</span> GST_STATE_NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tgst_object_unref <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Типичное создание пайплайна</h2>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">pipeline <span class=\"token operator\">=</span> gst_pipeline_new <span class=\"token punctuation\">(</span><span class=\"token string\">\"my-pipeline\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbus <span class=\"token operator\">=</span> gst_pipeline_get_bus <span class=\"token punctuation\">(</span>GST_PIPELINE <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngst_bus_add_signal_watch <span class=\"token punctuation\">(</span>bus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ng_signal_connect <span class=\"token punctuation\">(</span>bus<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>GCallback<span class=\"token punctuation\">)</span> cb_message<span class=\"token punctuation\">,</span>\n  pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsrc <span class=\"token operator\">=</span> gst_element_factory_make <span class=\"token punctuation\">(</span><span class=\"token string\">\"uridecodebin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src <span class=\"token operator\">==</span> NULL<span class=\"token punctuation\">)</span>\ng_error <span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not create 'uridecodebin' element\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ng_object_set <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uri\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncsp <span class=\"token operator\">=</span> gst_element_factory_make <span class=\"token punctuation\">(</span><span class=\"token string\">\"videoconvert\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"csp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>csp <span class=\"token operator\">==</span> NULL<span class=\"token punctuation\">)</span>\ng_error <span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not create 'videoconvert' element\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvs <span class=\"token operator\">=</span> gst_element_factory_make <span class=\"token punctuation\">(</span><span class=\"token string\">\"videoscale\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>csp <span class=\"token operator\">==</span> NULL<span class=\"token punctuation\">)</span>\ng_error <span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not create 'videoscale' element\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsink <span class=\"token operator\">=</span> gst_element_factory_make <span class=\"token punctuation\">(</span><span class=\"token string\">\"autovideosink\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sink <span class=\"token operator\">==</span> NULL<span class=\"token punctuation\">)</span>\ng_error <span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not create 'autovideosink' element\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngst_bin_add_many <span class=\"token punctuation\">(</span>GST_BIN <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> csp<span class=\"token punctuation\">,</span> vs<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">,</span> NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>API</h2>\n<p><code class=\"language-text\">gst_buffer_map</code> позволяет доставать <code class=\"language-text\">GstMapInfo</code> из <code class=\"language-text\">GstBuffer</code></p>\n<p>У GstMapInfo есть поля:</p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">guint8 <span class=\"token operator\">*</span>data<span class=\"token punctuation\">;</span>\ngsize size<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pad probes are best suited for looking at data as it passes through the pipeline. If you need to modify data, you should rather write your own GStreamer element. Base classes like GstAudioFilter, GstVideoFilter or GstBaseTransform make this fairly easy.</p>\n<p>If you just want to inspect buffers as they pass through the pipeline, you don't even need to set up pad probes. You could also just insert an identity element into the pipeline and connect to its \"handoff\" signal. The identity element also provides a few useful debugging tools like the dump and last-message properties; the latter is enabled by passing the '-v' switch to gst-launch and setting the silent property on the identity to FALSE.</p>\n<h2>tcp</h2>\n<h3>multifdsink</h3>\n<p><a href=\"https://gstreamer.freedesktop.org/documentation/tcp/multifdsink.html?gi-language=c#multifdsink\">https://gstreamer.freedesktop.org/documentation/tcp/multifdsink.html?gi-language=c#multifdsink</a></p>\n<p>Может писать поток в указанные файловые дескрипторы. Дескрипторы добавляются и удаляются через сигналы (<code class=\"language-text\">add</code>, <code class=\"language-text\">remove</code>)</p>\n<h3>tcpclientsink/tcpserversrc</h3>\n<p>Сами создают сокеты, достаточно передать лишь номер порта</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">gst-launch-1.0 tcpserversrc <span class=\"token assign-left variable\">port</span><span class=\"token operator\">=</span><span class=\"token number\">9999</span> <span class=\"token operator\">!</span> decodebin <span class=\"token operator\">!</span> alsasink\ngst-launch-1.0 filesrc <span class=\"token assign-left variable\">location</span><span class=\"token operator\">=</span>/home/yury-timofeev/samples/1.mp3 <span class=\"token operator\">!</span> tcpclientsink <span class=\"token assign-left variable\">port</span><span class=\"token operator\">=</span><span class=\"token number\">9999</span></code></pre></div>\n<p>Можно и микшировать сразу:</p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">gst<span class=\"token operator\">-</span>launch<span class=\"token operator\">-</span><span class=\"token number\">1.0</span> tcpserversrc port<span class=\"token operator\">=</span><span class=\"token number\">9999</span> <span class=\"token operator\">!</span> decodebin <span class=\"token operator\">!</span> audiomixer name<span class=\"token operator\">=</span>mix <span class=\"token operator\">!</span> alsasink tcpserversrc port<span class=\"token operator\">=</span><span class=\"token number\">9998</span> <span class=\"token operator\">!</span> decodebin <span class=\"token operator\">!</span> mix<span class=\"token punctuation\">.</span>\ngst<span class=\"token operator\">-</span>launch<span class=\"token operator\">-</span><span class=\"token number\">1.0</span> filesrc location<span class=\"token operator\">=</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>yury<span class=\"token operator\">-</span>timofeev<span class=\"token operator\">/</span>samples<span class=\"token operator\">/</span><span class=\"token number\">1.</span>mp3 <span class=\"token operator\">!</span> tcpclientsink port<span class=\"token operator\">=</span><span class=\"token number\">9999</span>\ngst<span class=\"token operator\">-</span>launch<span class=\"token operator\">-</span><span class=\"token number\">1.0</span> filesrc location<span class=\"token operator\">=</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>yury<span class=\"token operator\">-</span>timofeev<span class=\"token operator\">/</span>samples<span class=\"token operator\">/</span><span class=\"token number\">2.</span>mp3 <span class=\"token operator\">!</span> tcpclientsink port<span class=\"token operator\">=</span><span class=\"token number\">9998</span></code></pre></div>\n<p>При этом если мы хотим использовать <code class=\"language-text\">decodebin</code> на отправляющей стороне, то нужно поизвращаться:</p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">gst<span class=\"token operator\">-</span>launch<span class=\"token operator\">-</span><span class=\"token number\">1.0</span> tcpserversrc port<span class=\"token operator\">=</span><span class=\"token number\">9999</span> <span class=\"token operator\">!</span> audio<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>raw<span class=\"token punctuation\">,</span>format<span class=\"token operator\">=</span>S8<span class=\"token punctuation\">,</span>channels<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>rate<span class=\"token operator\">=</span><span class=\"token number\">48000</span> <span class=\"token operator\">!</span> audioconvert <span class=\"token operator\">!</span> alsasink\n\ngst<span class=\"token operator\">-</span>launch<span class=\"token operator\">-</span><span class=\"token number\">1.0</span> filesrc location<span class=\"token operator\">=</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>yury<span class=\"token operator\">-</span>timofeev<span class=\"token operator\">/</span>samples<span class=\"token operator\">/</span><span class=\"token number\">1.</span>mp3 <span class=\"token operator\">!</span> decodebin <span class=\"token operator\">!</span> audioconvert <span class=\"token operator\">!</span> audioresample <span class=\"token operator\">!</span> audio<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>raw<span class=\"token punctuation\">,</span>format<span class=\"token operator\">=</span>S8<span class=\"token punctuation\">,</span>channels<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>rate<span class=\"token operator\">=</span><span class=\"token number\">48000</span> <span class=\"token operator\">!</span> tcpclientsink port<span class=\"token operator\">=</span><span class=\"token number\">9999</span></code></pre></div>\n<h2>Сигналы</h2>\n<p>Используется концепция сигналов из GObjects (не имеют ничего общего с UNIX-сигналами): <a href=\"https://developer.gnome.org/gobject/stable/signal.html\">https://developer.gnome.org/gobject/stable/signal.html</a></p>\n<p>Вот так мы посылаем сигнал в элемент:</p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">GstElement <span class=\"token operator\">*</span>sink <span class=\"token operator\">=</span> <span class=\"token function\">gst_bin_get_by_name</span><span class=\"token punctuation\">(</span><span class=\"token function\">GST_BIN</span><span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">g_signal_emit_by_name</span><span class=\"token punctuation\">(</span>sink<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"192.168.1.25\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5004</span><span class=\"token punctuation\">,</span> NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">g_object_unref</span><span class=\"token punctuation\">(</span>sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>decodebin, oggdemux</h2>\n<p><a href=\"https://gstreamer.freedesktop.org/documentation/application-development/basics/pads.html#dynamic-or-sometimes-pads\">https://gstreamer.freedesktop.org/documentation/application-development/basics/pads.html#dynamic-or-sometimes-pads</a></p>\n<p>Декодирующие элементы <code class=\"language-text\">decodebin</code> и <code class=\"language-text\">oggdemux</code> имеют особую природу. Так как <code class=\"language-text\">decodebin</code> может работать со многими форматами, а <code class=\"language-text\">oggdemux</code> может работать с аудио- и видео-потоком, то их синки становятся известны лишь во время выполнения. Поэтому они не могут быть связаны обычным образом и их нужно добавлять динамически. Делается это так:</p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">#include <span class=\"token operator\">&lt;</span>gobject<span class=\"token operator\">/</span>gsignal<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nGstElement <span class=\"token operator\">*</span>pipeline <span class=\"token operator\">=</span> <span class=\"token function\">gst_pipeline_new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"audio-sender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nGstElement <span class=\"token operator\">*</span>source <span class=\"token operator\">=</span> <span class=\"token function\">gst_element_factory_make</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filesrc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"file-source\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nGstElement <span class=\"token operator\">*</span>decodebin <span class=\"token operator\">=</span> <span class=\"token function\">gst_element_factory_make</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decodebin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"decodebin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nGstElement <span class=\"token operator\">*</span>alsasink <span class=\"token operator\">=</span> <span class=\"token function\">gst_element_factory_make</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alsasink\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"alsasink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nGstBus<span class=\"token operator\">*</span> bus <span class=\"token operator\">=</span> <span class=\"token function\">gst_pipeline_get_bus</span><span class=\"token punctuation\">(</span><span class=\"token function\">GST_PIPELINE</span><span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nguint bus_watch_id <span class=\"token operator\">=</span> <span class=\"token function\">gst_bus_add_watch</span><span class=\"token punctuation\">(</span>bus<span class=\"token punctuation\">,</span> bus_call<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">gst_object_unref</span><span class=\"token punctuation\">(</span>bus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">gst_bin_add_many</span><span class=\"token punctuation\">(</span><span class=\"token function\">GST_BIN</span><span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> decodebin<span class=\"token punctuation\">,</span> alsasink<span class=\"token punctuation\">,</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// в бин добавляем все 3 элемента</span>\n<span class=\"token function\">gst_element_link</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> decodebin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// связываем только первые 2 элемента: filesrc ! decodebin</span>\n\n<span class=\"token function\">g_signal_connect</span><span class=\"token punctuation\">(</span>decodebin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pad-added\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">G_CALLBACK</span><span class=\"token punctuation\">(</span>on_pad_added<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> alsasink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// на decodebin привязываемся к сигналу pad-added, который будет вызван, когда у decodebin появился pad, который sink (в начале работы такого пада у него нет)</span></code></pre></div>\n<p>Коллбэк выглядит так:</p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">static void on_pad_added <span class=\"token punctuation\">(</span>GstElement <span class=\"token operator\">*</span>element<span class=\"token punctuation\">,</span>\n              GstPad     <span class=\"token operator\">*</span>pad<span class=\"token punctuation\">,</span>\n              gpointer    data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    GstPad <span class=\"token operator\">*</span>sinkpad<span class=\"token punctuation\">;</span>\n    GstElement <span class=\"token operator\">*</span>alsasink <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>GstElement <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">;</span>\n\n    sinkpad <span class=\"token operator\">=</span> gst_element_get_static_pad <span class=\"token punctuation\">(</span>alsasink<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// берем пад, равный синку (то есть входной) у элемента alsasink</span>\n\n    gst_pad_link <span class=\"token punctuation\">(</span>pad<span class=\"token punctuation\">,</span> sinkpad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// связываем наш пад (т.е. decodebin) с синком алсасинка</span>\n\n    gst_object_unref <span class=\"token punctuation\">(</span>sinkpad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>capsfilter</h2>\n<p>Когда вместо элемента в пайплайне начинает идти формат: </p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">gst<span class=\"token operator\">-</span>launch<span class=\"token operator\">-</span><span class=\"token number\">1.0</span> tcpserversrc port<span class=\"token operator\">=</span><span class=\"token number\">9999</span> <span class=\"token operator\">!</span> audio<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>raw<span class=\"token punctuation\">,</span>format<span class=\"token operator\">=</span>S8<span class=\"token punctuation\">,</span>channels<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>rate<span class=\"token operator\">=</span><span class=\"token number\">48000</span> <span class=\"token operator\">!</span> audioconvert <span class=\"token operator\">!</span> alsasink</code></pre></div>\n<p>то это алиас для:</p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">gst<span class=\"token operator\">-</span>launch<span class=\"token operator\">-</span><span class=\"token number\">1.0</span> tcpserversrc port<span class=\"token operator\">=</span><span class=\"token number\">9999</span> <span class=\"token operator\">!</span> capsfilter caps<span class=\"token operator\">=</span>audio<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>raw<span class=\"token punctuation\">,</span>format<span class=\"token operator\">=</span>S8<span class=\"token punctuation\">,</span>channels<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>rate<span class=\"token operator\">=</span><span class=\"token number\">48000</span> <span class=\"token operator\">!</span> audioconvert <span class=\"token operator\">!</span> alsasink</code></pre></div>\n<p>Я так до конца и не понял, что делает <code class=\"language-text\">capsfilter</code>, но вроде как он устанавливает ограничения для связи между двумя элементами. </p>\n<h2>Итерирование по элементам бина</h2>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\"><span class=\"token function\">g_print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pipeline contains the following elements:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nGstIterator <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\nGValue elem <span class=\"token operator\">=</span> G_VALUE_INIT<span class=\"token punctuation\">;</span>\nit <span class=\"token operator\">=</span> <span class=\"token function\">gst_bin_iterate_elements</span><span class=\"token punctuation\">(</span><span class=\"token function\">GST_BIN</span><span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">gst_iterator_next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>elem<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GST_ITERATOR_OK<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">g_print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">gst_element_get_name</span><span class=\"token punctuation\">(</span><span class=\"token function\">g_value_get_object</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">g_value_reset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">g_value_unset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">gst_iterator_free</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>queue2</h2>\n<ul>\n<li><code class=\"language-text\">buffering_level</code> - текущий уровень заполненности очереди. Нормализованный, принимает значения от 0 до 1.000.000</li>\n<li><code class=\"language-text\">buffering_percent</code> - уровень заполненности промежутка между high и low вотермарками. 0% означает, что <code class=\"language-text\">buffering_level == low_watermark</code>, 100% означает, что <code class=\"language-text\">buffering_level == high_watermark</code>. Принимает значения от 0 до 100.</li>\n<li><code class=\"language-text\">BUF_LEVEL_PERCENT_FACTOR</code> - чему в абсолютных значениях равен 1% buffering level, то есть <code class=\"language-text\">BUF_LEVEL_PERCENT_FACTOR ((MAX_BUFFERING_LEVEL) / 100) = 10.000</code></li>\n</ul>\n<p><code class=\"language-text\">gst_queue2_chain</code> - сюда поступают, здесь процессятся и отсюда выходят данные пайплайна. Это основная функция.</p>\n<p>Она форвардит вызов к <code class=\"language-text\">gst_queue2_chain_buffer_or_buffer_list</code>. Там поступивший буфер кладется во внутреннюю очередь строчкой <code class=\"language-text\">gst_queue2_locked_enqueue</code></p>\n<p>Следующие строки в методе <code class=\"language-text\">get_buffering_level</code>, кажется, наконец выставляют <code class=\"language-text\">buffering_level</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">#define <span class=\"token function\">GET_BUFFER_LEVEL_FOR_QUANTITY</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span>alt_max<span class=\"token punctuation\">)</span> \\\n    normalize_to_buffering_level <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-</span><span class=\"token operator\">></span>cur_level<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">,</span>queue<span class=\"token operator\">-</span><span class=\"token operator\">></span>max_level<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>alt_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* figure out the buffering level we are filled, we take the max of all formats. */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>QUEUE_IS_USING_RING_BUFFER <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  buflevel <span class=\"token operator\">=</span> GET_BUFFER_LEVEL_FOR_QUANTITY <span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  guint64 rb_size <span class=\"token operator\">=</span> queue<span class=\"token operator\">-</span><span class=\"token operator\">></span>ring_buffer_max_size<span class=\"token punctuation\">;</span>\n  buflevel <span class=\"token operator\">=</span> GET_BUFFER_LEVEL_FOR_QUANTITY <span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> rb_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbuflevel2 <span class=\"token operator\">=</span> GET_BUFFER_LEVEL_FOR_QUANTITY <span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuflevel <span class=\"token operator\">=</span> MAX <span class=\"token punctuation\">(</span>buflevel<span class=\"token punctuation\">,</span> buflevel2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuflevel2 <span class=\"token operator\">=</span> GET_BUFFER_LEVEL_FOR_QUANTITY <span class=\"token punctuation\">(</span>buffers<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuflevel <span class=\"token operator\">=</span> MAX <span class=\"token punctuation\">(</span>buflevel<span class=\"token punctuation\">,</span> buflevel2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* also apply the rate estimate when we need to */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-</span><span class=\"token operator\">></span>use_rate_estimate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  buflevel2 <span class=\"token operator\">=</span> GET_BUFFER_LEVEL_FOR_QUANTITY <span class=\"token punctuation\">(</span>rate_time<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  buflevel <span class=\"token operator\">=</span> MAX <span class=\"token punctuation\">(</span>buflevel<span class=\"token punctuation\">,</span> buflevel2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>И она вычисляют уровень для байт, времени, буферов и rate_time, а потом берут из них максимальный.</p>\n<h2>Написание плагина</h2>\n<p>Лучшая статья по этой теме, что я видел: <a href=\"https://habr.com/ru/post/221483/\">https://habr.com/ru/post/221483/</a></p>\n<h2>Preroll</h2>\n<p>Когда из состояния READY выставляем состояние PAUSED, то данные уже начинают идти по пайплайну, но когда они доходят до последнего sink-элемента (напр. alsasink), то они блочатся у его входа и в результате не \"рендерятся\". В этом состоянии каждый из элементов держит один или несколько буферов, но когда все элементы заполнят свои внутренние очереди, проход данных по пайплайну остановится до перехода в состояние PLAYING. Этот процесс называется pre-roll и он нужен для того, чтобы когда мы переведем в состояние PLAYING, переход прошел максимально быстро.</p>\n<p>Все изменения состояния, идущие \"наверх\" (то есть NULL-READY-PAUSED-PLAYING) - выполняются асинхронно. То есть мы шлем команду на изменение состояния, она возвращается сразу же и потом от шины приходит сообщение, что состояние изменено.</p>\n<p>Изменения состояния, идущие \"вниз\" - наоборот, все синхронны.</p>\n<p>Главная разница между сигналами и сообщениями от шины - сигналы синхронны и могут вызваться из любого потока в любое время (поэтому в них нужно заботиться о мультипоточности). Сообщения - асинхронны и выполняются в потоке приложения, поэтому могут быть выполнены тогда, когда приложению будет удобно.</p>\n<p>Свойство <code class=\"language-text\">sync</code> у <code class=\"language-text\">sink</code>-элементов означает, будет ли поток из этих элементов синхронизирован с часами. Если стоит <code class=\"language-text\">false</code>, то поток будет выдан на рендер настолько быстро, насколько это возможно.</p>\n<p><code class=\"language-text\">gst-inspect-1.0 --gst-debug -help</code> - выводит всю инфу о том, что может быть залогировано</p>\n<p>В GST dev tools есть GST debug viewer, который облегчит чтение логов.</p>\n<p>Пример использования сетевых часов для мульти-рума: <a href=\"https://github.com/thaytan/gst-tutorial-lca2018/tree/master/network-clocks\">https://github.com/thaytan/gst-tutorial-lca2018/tree/master/network-clocks</a></p>\n<p>Working with dynamic pipelines: <a href=\"https://coaxion.net/blog/2014/01/gstreamer-dynamic-pipelines/\">https://coaxion.net/blog/2014/01/gstreamer-dynamic-pipelines/</a> код из тэой статьи здесь: <a href=\"https://github.com/sdroege/gst-snippets/blob/217ae015aaddfe3f7aa66ffc936ce93401fca04e/dynamic-tee-vsink.c\">https://github.com/sdroege/gst-snippets/blob/217ae015aaddfe3f7aa66ffc936ce93401fca04e/dynamic-tee-vsink.c</a></p>\n<p>Когда регистрируем проб с типом <code class=\"language-text\">GST_PAD_PROBE_TYPE_IDLE</code>, то указанный коллбэк будет вызван как только этот пад начнет простаивать, то есть по нему перестанут идти данные.</p>\n<h2>Удаление ветви пайплайна</h2>\n<p>Например, у нас есть такой пайплайн:\n\nsrc -> bin -> conv -> tee -> queue -> fakesink\t\t\t(1)\n-> queue -> conv -> sink \t\t(2)</p>\n<p>и мы хотим удалить ветвь (2)</p>\n<p>Для этого мы берем наш src-pad элемента tee и ставим на него проб с типом <code class=\"language-text\">GST_PAD_PROBE_TYPE_IDLE</code>. В коллбэке проба делаем следующее (<a href=\"https://github.com/sdroege/gst-snippets/blob/217ae015aaddfe3f7aa66ffc936ce93401fca04e/dynamic-tee-vsink.c#L93\">https://github.com/sdroege/gst-snippets/blob/217ae015aaddfe3f7aa66ffc936ce93401fca04e/dynamic-tee-vsink.c#L93</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">teepad <span class=\"token operator\">=</span> <span class=\"token function\">gst_element_get_static_pad</span><span class=\"token punctuation\">(</span>tee<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src_&lt;номер>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsinkpad <span class=\"token operator\">=</span> gst_element_get_static_pad <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngst_pad_unlink <span class=\"token punctuation\">(</span>teepad<span class=\"token punctuation\">,</span> sinkpad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngst_object_unref <span class=\"token punctuation\">(</span>sinkpad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngst_element_set_state <span class=\"token punctuation\">(</span>sink<span class=\"token punctuation\">,</span> GST_STATE_NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngst_element_set_state <span class=\"token punctuation\">(</span>conv<span class=\"token punctuation\">,</span> GST_STATE_NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngst_element_set_state <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> GST_STATE_NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngst_bin_remove <span class=\"token punctuation\">(</span>GST_BIN <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngst_bin_remove <span class=\"token punctuation\">(</span>GST_BIN <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> conv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngst_bin_remove <span class=\"token punctuation\">(</span>GST_BIN <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngst_object_unref <span class=\"token punctuation\">(</span>sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngst_object_unref <span class=\"token punctuation\">(</span>conv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngst_object_unref <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngst_element_release_request_pad <span class=\"token punctuation\">(</span>tee<span class=\"token punctuation\">,</span> teepad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngst_object_unref <span class=\"token punctuation\">(</span>teepad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> GST_PAD_PROBE_REMOVE<span class=\"token punctuation\">;</span></code></pre></div>\n<p>При окончании потока делаем gst<em>app</em>src<em>end</em>of_stream () чтобы послать EOS в пайплайн</p>\n<p>В месте связи ветки ставим проб и ждем, пока придет EOS. только это надо сделать до того, как послали EOS.</p>\n<p>Когда пришел EOS, запускаем наш unlink_cb</p>\n<p>GST<em>PAD</em>PROBE<em>TYPE</em>EVENT_DOWNSTREAM чтобы ловить евенты через проб</p>\n<p>нН чтобы были нотификации по ивентам, нужно сделать GST<em>PAD</em>PROBE<em>TYPE</em>EVENT_FLUSH</p>\n<p>При получении EOS в пробе его можно дропнуть</p>\n<h2>gst-shark</h2>\n<p>Установка пути, куда сохраняются результаты:</p>\n<p><code class=\"language-text\">export GST_SHARK_LOCATION=~/profile</code></p>\n<p>Запуск с трейсером:</p>\n<p><code class=\"language-text\">GST_TRACERS=&quot;tracer1;tracer2&quot; gst-launch-1.0 ...</code></p>\n<p>Если нужно трейсерам указать параметры, то можно так:</p>\n<p><code class=\"language-text\">GST_TRACERS=&quot;tracer1(parameter1=value1);tracer2(parameter2=value2)&quot; gst-launch-1.0 ...</code></p>\n<p>Параметром <code class=\"language-text\">filter</code> можно устанавливать ограничение на профилируемый элемент. Значением фильтра пишем регэкспы по правилам Glib: <a href=\"https://developer.gnome.org/glib/stable/glib-regex-syntax.html\">https://developer.gnome.org/glib/stable/glib-regex-syntax.html</a></p>\n<p>Пример:</p>\n<p><code class=\"language-text\">gst-launch-1.0 videotestsrc ! identity name=i0 ! queue ! identity name=i1 ! x264enc ! identity name=i2 ! queue ! fakesink</code></p>\n<p>Вывести фреймрейт в каждом из <code class=\"language-text\">identity</code>:</p>\n<p><code class=\"language-text\">GST_TRACERS=&quot;framerate(filter=^i[0-9])&quot; GST_DEBUG=GST_TRACER:7</code></p>\n<p>Вывести фреймрейт для всех <code class=\"language-text\">identity</code> кроме <code class=\"language-text\">i2</code></p>\n<p><code class=\"language-text\">GST_TRACERS=&quot;framerate(filter=^i[^2])&quot; GST_DEBUG=GST_TRACER:7</code></p>\n<p>Вывести <code class=\"language-text\">scheduletime</code> в <code class=\"language-text\">videotestsrc</code>:</p>\n<p><code class=\"language-text\">GST_TRACERS=&quot;scheduletime(filter=videotestsrc0)&quot; GST_DEBUG=GST_TRACER:7</code></p>\n<h2>Трейсеры</h2>\n<ul>\n<li><code class=\"language-text\">interlatency</code> - Замеряет время, требуемое буферу, чтобы пройти от одной точки до другой внутри пайплайна. Предоставляет замеры времени, за которое буфер прошел от src первого элемента до src каждого последующего. Точность - нс.</li>\n<li><code class=\"language-text\">proctime</code> - замеры времени, за которое каждый из элементов обрабатывает очередной буфер</li>\n<li><code class=\"language-text\">framerate</code> - каждую секунду для каждого элемента выводит количество кадров, которое через него прошло</li>\n<li><code class=\"language-text\">scheduletime</code> - замеряет время, проходящее между появлениеями буферов на sink pad каждого элемента</li>\n<li><code class=\"language-text\">cpuusage</code> - каждую секунду выводит загрузку ЦП. <strong>ВАЖНО</strong>: это относится к общей загрузке ЦП, а не только той, которая обеспечивается пайплайном</li>\n<li><code class=\"language-text\">bitrate</code> - каждую секунду выводит битрейт</li>\n<li><code class=\"language-text\">queuelevel</code> - выводит, сколько байт и сколько буферов лежит в каждой очереди, обновляется каждый раз, когда в очередь входит новый буфер. НЕ РАБОТАЕТ с queue2, только с queue.</li>\n<li><code class=\"language-text\">buffer</code> - выводит инфу о каждом буфере, который выходит из первого (source) элемента. PTS = presentation time stamp (указывает, когда нужно отрендерить этот буфер), DTS = decoding time stamp (указывает, когда нужно декодировать этот кадр). Порядок рендера и декодирования может быть разный, потому что некоторые кадры может быть нужно декодировать раньше, чем они будут показаны.</li>\n</ul>","frontmatter":{"path":"/blog/gstreamer","title":"Gstreamer"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}