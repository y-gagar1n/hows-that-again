{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/mvc-web-sockets","webpackCompilationHash":"b32de601192887675132","result":{"data":{"markdownRemark":{"html":"<h1>ASP.NET MVC - WebSocket Strategy</h1>\n<p>Веб-сокеты позволяют организовать двунаправленное общение между клиентом и сервером, а так же позволяют устанавливать новое соединение не при каждом запросе, а единожды на сессию. </p>\n<h2>Как делали раньше</h2>\n<h3>HTTP Polling</h3>\n<p>После каждого ответа отправляем новый AJAX-запрос, тем самым создаем иллюзию непрекращающегося соединения. Очень расточительный метод.</p>\n<h3>HTTP Long polling</h3>\n<p>Клиент делает AJAX-запрос к серверу, а сервер держит его до тех пор, пока у него не появятся данные для отсылки клиенту. То есть соединение устанавливается как бы заранее.</p>\n<h2>Как сейчас</h2>\n<p>Веб-сокеты выступают как замена HTTP в качестве протокола взаимообщения. Не стоит его использовать в качестве основного средства коммуникации, а только для двунаправленных и продолжительных взаимодействий.</p>\n<p>Соединение через веб-сокеты включает клиентскую и серверную часть. Состоит из 3 шагов:</p>\n<ol>\n<li>Установление соединения путем хэндшейка</li>\n<li>Запрос, чтобы убедиться, что сервер начал ждать взаимодействия</li>\n<li>Передача данных</li>\n</ol>\n<p>Когда запрашивается веб-сокет, браузер сначала открывает простое HTTP-соединение с сервером. Затем браузер шлет запрос на апгрейд соединения до веб-сокетного. Если запрос прошел и хэндшейк удался, то дальнейшее общение происходит в рамках одного TCP-сокета.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> socket<span class=\"token punctuation\">;</span>   \n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   \n\tsocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://localhost:1046/socket/handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\tsocket<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evnt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#display\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n\t<span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\tsocket<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evnt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#display \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>evnt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\tsocket<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evnt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#display \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unexpected error.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token operator\">...</span>   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Когда внедряем в приложение поддержку веб-сокетов, нужно определять, как будем управлять соединением. Обычно это делается в HTTP-хэндлере или модуле. Нужно реализовать процесс апгрейда соединения при соответствующем запросе. Это делается так:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HttpContext.Current.AcceptWebSocketRequest(Func&lt;AspNetWebSocketContext,  \nTask&gt;)</code></pre></div>\n<p>Передаваемый делегат будет вызван после хэндшейка. Пример:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">MyWebSocket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AspNetWebSocketContext</span> context<span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">{</span>   \n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>   \n\t<span class=\"token punctuation\">{</span>   \n\t\tArraySegment<span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token operator\">></span> arraySegment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">ArraySegment</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\t\t<span class=\"token comment\">// open the result. This is waiting asynchronously  </span>\n\t\t<span class=\"token class-name\">WebSocketReceiveResult</span> socketResult <span class=\"token operator\">=</span>   \n\t\t<span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span>WebSocket<span class=\"token punctuation\">.</span><span class=\"token function\">ReceiveAsync</span><span class=\"token punctuation\">(</span>arraySegment<span class=\"token punctuation\">,</span>   \n\t\t\tCancellationToken<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n  \n\t\t<span class=\"token comment\">// return the message to the client if the socket is still open  </span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>WebSocket<span class=\"token punctuation\">.</span>State <span class=\"token operator\">==</span> WebSocketState<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">)</span>   \n\t\t<span class=\"token punctuation\">{</span>   \n\t\t\t<span class=\"token keyword\">string</span> message <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>arraySegment<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   \n\t\t\t\tsocketResult<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\t\t\tuserMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Your message: \"</span> \\<span class=\"token operator\">+</span> message <span class=\"token operator\">+</span> <span class=\"token string\">\" at \"</span> <span class=\"token operator\">+</span>   \n\t\t\tDateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t\tarraySegment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>   \n\t\t\t\t<span class=\"token generic-method\"><span class=\"token function\">ArraySegment</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n  \n\t\t\t<span class=\"token comment\">// Asynchronously send a message to the client   </span>\n\t\t\t<span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span>WebSocket<span class=\"token punctuation\">.</span><span class=\"token function\">SendAsync</span><span class=\"token punctuation\">(</span>arraySegment<span class=\"token punctuation\">,</span>   \n\t\t\t\tWebSocketMessageType<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span>   \n\t\t\t\t<span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> CancellationToken<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n\t\t<span class=\"token punctuation\">}</span>   \n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>   \n\t<span class=\"token punctuation\">}</span>   \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Connection loss strategy</h2>\n<p>Нужно предусмотреть план действий при потере соединения. Действия эти будут производиться на клиенте. Когда соединение закроется, у клиента вызовется либо onclose либо onerror. В этом случае нужно переоткрывать соединение и слать запрос еще раз.</p>\n<p>Приложение должно слать запрос и ждать ответа, а затем на основании ответа или его отсутствия, решать, приняла ли другая сторона запрос. Если нет - слать еще раз. Однако возможно и такое, что принимающая сторона получила запрос, но не смогла ответить. Нужно быть готовым к нескольким одинаковым запросам.</p>\n<h2>Когда использовать</h2>\n<p>Зачастую используют в мессенджерах и дэшбордах. Следует помнить, что у веб-сокетных запросов нет HTTP-заголовков, хоть они и ведут себя как HTTP-запросы.</p>","frontmatter":{"path":"/blog/mvc-web-sockets","title":"ASP.NET MVC - WebSocket Strategy"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}