{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/gdb","webpackCompilationHash":"61464ac1a8d681d555f0","result":{"data":{"markdownRemark":{"html":"<h1>GDB</h1>\n<h2>peda</h2>\n<p>peda - удобное окружение для GDB</p>\n<p><a href=\"https://github.com/longld/peda\">https://github.com/longld/peda</a></p>\n<p>Установка:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/longld/peda.git ~/peda\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"source ~/peda/peda.py\"</span> <span class=\"token operator\">>></span> ~/.gdbinit</code></pre></div>\n<h2>Сборка</h2>\n<p>Чтобы было удобно пользоваться gdb, при сборке нужно использовать флаги -g и -O0</p>\n<h2>История команд</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> <span class=\"token function\">history</span> save on\n<span class=\"token builtin class-name\">set</span> <span class=\"token function\">history</span> filename ~/.gdb_history</code></pre></div>\n<h2>Основные команды</h2>\n<ul>\n<li><code class=\"language-text\">b main.c:175</code> - установить брейкпойнт в main.c:175</li>\n<li><code class=\"language-text\">b start_work</code> - установить брейкпойнт в начало функции start_work</li>\n<li><code class=\"language-text\">b start_work if b == 0</code> - установить брейкпойнт с условием</li>\n<li><code class=\"language-text\">p a</code> - вывод переменной а</li>\n<li><code class=\"language-text\">p *a</code> - вывод значения по адресу а</li>\n<li><code class=\"language-text\">bt</code> - текущий бэктрэйс</li>\n</ul>\n<h2>Watchpoints</h2>\n<ul>\n<li><code class=\"language-text\">watch expr</code> - установить брейкпойнт на запись выражения expr</li>\n<li><code class=\"language-text\">rwatch expr</code> - установить брейкпойнт на чтение выражения expr</li>\n<li><code class=\"language-text\">awatch expr</code> - установить брейкпойнт на чтение и запись выражения expr</li>\n</ul>\n<p>Список можно получить по <code class=\"language-text\">info watchpoints</code>. Любой вотчпойнт из списка можно удалить по <code class=\"language-text\">delete N</code>.</p>\n<p>Установка вотчпойнта на поле класса:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> p <span class=\"token operator\">&amp;</span>bar\n<span class=\"token variable\">$1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int *<span class=\"token punctuation\">)</span> 0x10793ad0\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> <span class=\"token function\">watch</span> *0x10793ad0</code></pre></div>\n<h2>Написание скриптов</h2>\n<p>Вот такой скрипт установит брейкпойнты в функции <code class=\"language-text\">gst_object_ref</code>  и <code class=\"language-text\">gst_object_unref</code>, которые будут срабатывать, когда первый аргумент (<code class=\"language-text\">$rdi</code>) указывает на тот же адрес, что и переменная <code class=\"language-text\">audioconvert</code>. При каждом срабатывании брейкпойнта будет печетаться стектрейс и выполнение продолжится дальше.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">set pagination off \nbreak main.cpp:69\nrun\nset $conv=audioconvert\nbreak gst_object_ref if ($rdi == $conv)\ncommands\nbt\ncont\nend\nbreak gst_object_unref if ($rdi == $conv)\ncommands\nbt\ncont\nend\ncont</code></pre></div>\n<p>Ключевое слово <code class=\"language-text\">commands</code> позволяет задать несколько действий, которые будут выполнены, когда сработает этот брейкпойнт. Список действий заключен между <code class=\"language-text\">commands</code> и <code class=\"language-text\">end</code>.</p>\n<p><code class=\"language-text\">set pagination off</code> - указывает, что при выводе стектрейса не нужно останавливать выполнение и выводить \"нажмите пробел для следующей страницы\".</p>\n<h2>Выполнение скрипта</h2>\n<p>Сохраняем скрипт в файл <strong>script.txt</strong> затем делаем:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gdb -x script.txt</code></pre></div>\n<h2>Проход по бэктрэйсу</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gdb$ p <span class=\"token variable\">$rbp</span>\n<span class=\"token variable\">$15</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>void *<span class=\"token punctuation\">)</span> 0x7fffffffe5c0\t\t<span class=\"token comment\"># в регистре rbp хранится адрес начала фрейма предыдущей функции, то есть предыдущее значение rbp. В $15 теперь хранится как раз оно.</span>\ngdb$ p *<span class=\"token punctuation\">(</span>long*<span class=\"token punctuation\">)</span><span class=\"token variable\">$15</span>\n<span class=\"token variable\">$16</span> <span class=\"token operator\">=</span> 0x7fffffffe5d0\t\t\t\t<span class=\"token comment\"># получаем значение адреса, лежащего в регистре $rbp. то есть адрес пред-предыдущего фрейма.</span>\ngdb$ p *<span class=\"token punctuation\">(</span>long*<span class=\"token punctuation\">)</span><span class=\"token variable\">$16</span> \n<span class=\"token variable\">$17</span> <span class=\"token operator\">=</span> 0x7fffffffe5e0\t\t\t\t<span class=\"token comment\"># и так далее...</span>\ngdb$ p *<span class=\"token punctuation\">(</span>long*<span class=\"token punctuation\">)</span><span class=\"token variable\">$17</span>\n<span class=\"token variable\">$18</span> <span class=\"token operator\">=</span> 0x7fffffffe600\ngdb$ p *<span class=\"token punctuation\">(</span>long*<span class=\"token punctuation\">)</span><span class=\"token variable\">$18</span>\n<span class=\"token variable\">$19</span> <span class=\"token operator\">=</span> 0x400c70\t\t\t\t\t\t<span class=\"token comment\"># а здесь адрес уже подозрительно маленький, наверно лежит в сегменте .code, а значит мы добрались до верха стектрейса</span>\ngdb$ p *<span class=\"token punctuation\">(</span>long*<span class=\"token punctuation\">)</span><span class=\"token variable\">$19</span>\n<span class=\"token variable\">$20</span> <span class=\"token operator\">=</span> 0x41d7894956415741</code></pre></div>\n<h2>Чтение значения регистра</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gdb$ p <span class=\"token variable\">$rbp</span>\t\t\t\t<span class=\"token comment\"># прочесть значение регистра rbp</span>\ngdb$ p <span class=\"token punctuation\">(</span><span class=\"token variable\">$rbp</span><span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\"># прочесть значение по адресу, лежащему в регистре rbp</span>\ngdb$ p <span class=\"token punctuation\">(</span><span class=\"token variable\">$rbp</span> + <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># прочесть значение по адресу, лежащему на 8 байт выше, чем адрес в регистре rbp</span></code></pre></div>\n<h2>Отладка SIGSEGV</h2>\n<p>Если на SIGSEGV установлен хэндлер, то по умолчанию GDB в него не будет заходить, потому что ловит сигнал раньше программы и завершает ее выполнение. Чтобы зайти в хэндлер, надо сделать так:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">handle SIGSEGV pass\nhandle SIGSEGV nostop</code></pre></div>","frontmatter":{"path":"/blog/gdb","title":"Gdb"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}