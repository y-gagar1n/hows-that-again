{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/video/10-ways-to-get-highload-and-bigdata/","result":{"data":{"markdownRemark":{"html":"<iframe width=\"636\" height=\"358\" src=\"https://www.youtube.com/embed/P__hN6u9yCw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h1 id=\"10-способов-достижения-highloadа-и-bigdata-на-ровном-месте\" style=\"position:relative;\"><a href=\"#10-%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1%D0%BE%D0%B2-%D0%B4%D0%BE%D1%81%D1%82%D0%B8%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F-highload%D0%B0-%D0%B8-bigdata-%D0%BD%D0%B0-%D1%80%D0%BE%D0%B2%D0%BD%D0%BE%D0%BC-%D0%BC%D0%B5%D1%81%D1%82%D0%B5\" aria-label=\"10 способов достижения highloadа и bigdata на ровном месте permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10 способов достижения HighLoad'а и BigData на ровном месте</h1>\n<h2 id=\"1-масштабирование\" style=\"position:relative;\"><a href=\"#1-%D0%BC%D0%B0%D1%81%D1%88%D1%82%D0%B0%D0%B1%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5\" aria-label=\"1 масштабирование permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Масштабирование</h2>\n<p>Типичный случай: расчитываем на миллион пользователей, поставили 100 инстансов PostgreSQL, шардирование по created_at.</p>\n<h3 id=\"последствия\" style=\"position:relative;\"><a href=\"#%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D1%81%D1%82%D0%B2%D0%B8%D1%8F\" aria-label=\"последствия permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Последствия:</h3>\n<ul>\n<li>любое взаимодействие, затрагивающее пользователей, лежащих на разных нодах (например, чат) - боль, логика сильно усложняется</li>\n<li>оказывается, что пользователи, созданные давно - малоактивны, поэтому 90 машин кластера простаивают, а оставшиеся 10 утилизованы на 100%. Надо было шардить по user_id.</li>\n<li>при обращении к незанятой машине кэш у нее холодный и запарос выполняется в разы дольше</li>\n</ul>\n<h3 id=\"как-надо-было\" style=\"position:relative;\"><a href=\"#%D0%BA%D0%B0%D0%BA-%D0%BD%D0%B0%D0%B4%D0%BE-%D0%B1%D1%8B%D0%BB%D0%BE\" aria-label=\"как надо было permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Как надо было:</h3>\n<ul>\n<li>нечего было сразу масштабироваться, нужно было сначала вырасти до ресурсов одной машины, потом посчитать стоимость ее апгрейда и только после этого принимать решение о масштабировании</li>\n</ul>\n<h2 id=\"2-бизнес-хочет-хранить-данные-за-все-время\" style=\"position:relative;\"><a href=\"#2-%D0%B1%D0%B8%D0%B7%D0%BD%D0%B5%D1%81-%D1%85%D0%BE%D1%87%D0%B5%D1%82-%D1%85%D1%80%D0%B0%D0%BD%D0%B8%D1%82%D1%8C-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5-%D0%B7%D0%B0-%D0%B2%D1%81%D0%B5-%D0%B2%D1%80%D0%B5%D0%BC%D1%8F\" aria-label=\"2 бизнес хочет хранить данные за все время permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Бизнес хочет хранить данные за все время</h2>\n<p>Нужны отчеты за все время, поэтому мы в одну огромную базу сохраняем все данные и никогда не удаляем</p>\n<h3 id=\"последствия-1\" style=\"position:relative;\"><a href=\"#%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D1%81%D1%82%D0%B2%D0%B8%D1%8F-1\" aria-label=\"последствия 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Последствия:</h3>\n<ul>\n<li>через несколько лет получаем big data на пустом месте</li>\n</ul>\n<h3 id=\"как-надо-было-1\" style=\"position:relative;\"><a href=\"#%D0%BA%D0%B0%D0%BA-%D0%BD%D0%B0%D0%B4%D0%BE-%D0%B1%D1%8B%D0%BB%D0%BE-1\" aria-label=\"как надо было 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Как надо было:</h3>\n<ul>\n<li>ретроспективные данные можно архивировать</li>\n<li>не хранить сырые данные, а хранить агрегаты по ним (но это если бизнес согласится, что им не понадобятся новые агрегаты)</li>\n<li>можно партиционировать и на одном сервере хранить архивные данные, на другом - горячие + агрегаты</li>\n</ul>\n<h2 id=\"3-eav-упрощает-проектирование\" style=\"position:relative;\"><a href=\"#3-eav-%D1%83%D0%BF%D1%80%D0%BE%D1%89%D0%B0%D0%B5%D1%82-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5\" aria-label=\"3 eav упрощает проектирование permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. EAV упрощает проектирование</h2>\n<p>EAV (Entity-attribute-value) - это подход, используемый когда у нас есть сущности, у которых есть много атрибутов, но используется лишь малая их часть. Тогда создается таблица <code class=\"language-text\">Attributes</code> с тремя колонками: </p>\n<ul>\n<li>Entity: идентификатор сущности</li>\n<li>Attribute: название атрибута</li>\n<li>Value: значение атрибута</li>\n</ul>\n<p>Применяется, чтобы упростить проектирование</p>\n<h3 id=\"последствия-2\" style=\"position:relative;\"><a href=\"#%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D1%81%D1%82%D0%B2%D0%B8%D1%8F-2\" aria-label=\"последствия 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Последствия:</h3>\n<ul>\n<li>все данные лежат в 3-4 гигантских таблицах, которые все время джойнятся. Типы полей <code class=\"language-text\">Attribute</code> и <code class=\"language-text\">Value</code> будут, скорее всего, текстовые, а это значит что эффективность индексирования таких данных будет крайне мала. В результате наши джойны будут очень долгими.</li>\n<li>через некоторое время EAV гордо переименовывается в ядро и обрастает витринами и представлениями с денормализованными данными в реляционном виде. Работает медленно и плохо. Любое изменение в схеме ведет кучу изменений в этих разрозненных представлениях. Чтобы упростить, приходится выкидывать ядро.</li>\n</ul>\n<h3 id=\"как-надо-было-2\" style=\"position:relative;\"><a href=\"#%D0%BA%D0%B0%D0%BA-%D0%BD%D0%B0%D0%B4%D0%BE-%D0%B1%D1%8B%D0%BB%D0%BE-2\" aria-label=\"как надо было 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Как надо было:</h3>\n<ul>\n<li>не лениться и делать отдельные реляционные таблицы</li>\n</ul>\n<h2 id=\"4-orm-упрощает-разработку\" style=\"position:relative;\"><a href=\"#4-orm-%D1%83%D0%BF%D1%80%D0%BE%D1%89%D0%B0%D0%B5%D1%82-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D1%83\" aria-label=\"4 orm упрощает разработку permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. ORM упрощает разработку</h2>\n<ul>\n<li>универсальный способ убить производительность любой базы</li>\n</ul>\n<h3 id=\"как-надо-было-3\" style=\"position:relative;\"><a href=\"#%D0%BA%D0%B0%D0%BA-%D0%BD%D0%B0%D0%B4%D0%BE-%D0%B1%D1%8B%D0%BB%D0%BE-3\" aria-label=\"как надо было 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Как надо было:</h3>\n<ul>\n<li>использовать только в прототипах</li>\n</ul>\n<h2 id=\"5-главное-зло-в-postgresql---autovacuum\" style=\"position:relative;\"><a href=\"#5-%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D0%BE%D0%B5-%D0%B7%D0%BB%D0%BE-%D0%B2-postgresql---autovacuum\" aria-label=\"5 главное зло в postgresql   autovacuum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Главное зло в PostgreSQL - autovacuum</h2>\n<p>Постоянно работает и всему мешает, в результате чего его выключают.</p>\n<h3 id=\"последствия-3\" style=\"position:relative;\"><a href=\"#%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D1%81%D1%82%D0%B2%D0%B8%D1%8F-3\" aria-label=\"последствия 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Последствия:</h3>\n<ul>\n<li>фрагментированная таблица на 100К строк занимает 100 ГБ</li>\n</ul>\n<h3 id=\"как-надо-было-4\" style=\"position:relative;\"><a href=\"#%D0%BA%D0%B0%D0%BA-%D0%BD%D0%B0%D0%B4%D0%BE-%D0%B1%D1%8B%D0%BB%D0%BE-4\" aria-label=\"как надо было 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Как надо было:</h3>\n<ul>\n<li>не отключать и смотреть <a href=\"https://www.slideshare.net/PostgreSQL-Consulting/autovacuum-explained-for-engineers-new-improved-version-pgconfeu-2015-vienna\">здесь</a> как с ним жить</li>\n</ul>\n<h2 id=\"6-join-это-зло---они-медленные\" style=\"position:relative;\"><a href=\"#6-join-%D1%8D%D1%82%D0%BE-%D0%B7%D0%BB%D0%BE---%D0%BE%D0%BD%D0%B8-%D0%BC%D0%B5%D0%B4%D0%BB%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5\" aria-label=\"6 join это зло   они медленные permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. JOIN это зло - они медленные</h2>\n<h3 id=\"последствия-4\" style=\"position:relative;\"><a href=\"#%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D1%81%D1%82%D0%B2%D0%B8%D1%8F-4\" aria-label=\"последствия 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Последствия:</h3>\n<p>Чтобы не использовать джойн, в контроллер вытягиваются 2 таблицы из базы, они джойнятся средствами ЯП. Затем, чтобы оптимизировать этот велосипедный джойн, добавляется выбор алгоритма - nested loop, hash или merge. В результате получается самодельная БД, только плохая.</p>\n<h3 id=\"как-надо-было-5\" style=\"position:relative;\"><a href=\"#%D0%BA%D0%B0%D0%BA-%D0%BD%D0%B0%D0%B4%D0%BE-%D0%B1%D1%8B%D0%BB%D0%BE-5\" aria-label=\"как надо было 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Как надо было:</h3>\n<ul>\n<li>Надо было джойнить и не выпендриваться. Джойны на самом деле быстрые, реляционная база данных оптимизирована для работы с джойнами. </li>\n</ul>\n<h2 id=\"7-давайте-изобретем-slony\" style=\"position:relative;\"><a href=\"#7-%D0%B4%D0%B0%D0%B2%D0%B0%D0%B9%D1%82%D0%B5-%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B5%D1%82%D0%B5%D0%BC-slony\" aria-label=\"7 давайте изобретем slony permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Давайте изобретем Slony</h2>\n<p>(Slony - система репликации, используемая в PostgreSQL)</p>\n<h3 id=\"последствия-5\" style=\"position:relative;\"><a href=\"#%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D1%81%D1%82%D0%B2%D0%B8%D1%8F-5\" aria-label=\"последствия 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Последствия:</h3>\n<ul>\n<li>велосипед всегда работает как-то не так, потому что репликация - это обработка распределенных транзакций, а это тяжело</li>\n<li>велосипед скорее всего будет работать на уровне SQL, таблиц, триггеров и хранимых процедур. Это медленно и чревато конфликтами.</li>\n</ul>\n<h3 id=\"как-надо-было-6\" style=\"position:relative;\"><a href=\"#%D0%BA%D0%B0%D0%BA-%D0%BD%D0%B0%D0%B4%D0%BE-%D0%B1%D1%8B%D0%BB%D0%BE-6\" aria-label=\"как надо было 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Как надо было:</h3>\n<ul>\n<li>использовать готовые проверенные решения. Если в них чего-то нет, значит тому есть причина. Возможно желаемый функционал просто невозможно реализовать с учетом всех сложностей репликации.</li>\n<li>в готовых решениях используется репликация лога транзакций на низком уровне</li>\n</ul>\n<h2 id=\"8-у-меня-в-тесте-все-работает\" style=\"position:relative;\"><a href=\"#8-%D1%83-%D0%BC%D0%B5%D0%BD%D1%8F-%D0%B2-%D1%82%D0%B5%D1%81%D1%82%D0%B5-%D0%B2%D1%81%D0%B5-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82\" aria-label=\"8 у меня в тесте все работает permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. У меня в тесте все работает</h2>\n<p>Разработчики используют EXPLAIN, но только на своей разработческой машине. А на продакшне данных в 1000 раз больше и все сразу тормозит.</p>\n<h3 id=\"как-надо-было-7\" style=\"position:relative;\"><a href=\"#%D0%BA%D0%B0%D0%BA-%D0%BD%D0%B0%D0%B4%D0%BE-%D0%B1%D1%8B%D0%BB%D0%BE-7\" aria-label=\"как надо было 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Как надо было:</h3>\n<ul>\n<li>у разработчиков должен быть какой-то ограниченный доступ к продакшну. В идеале на чтение. Если нельзя, то, например, доступ к мониторингу базы, чтобы после деплоя видеть, сколько ресурсов потребляет каждый запрос. Либо же должны быть отлаженные процедуры работы с DBA, чтобы можно было попросить их прогнать какой-то запрос.</li>\n</ul>\n<h2 id=\"9-be-smart-as-a-java-developer\" style=\"position:relative;\"><a href=\"#9-be-smart-as-a-java-developer\" aria-label=\"9 be smart as a java developer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. Be smart, as a java-developer</h2>\n<p>Разработчик хочет быстрее закачать данные в базу, поэтому делает это в 500 тредов. А на стороне БД есть только 10 воркеров (по числу ядер) и в результате 500 тредов, пытающиеся пролезть в 10 воркеров, начинают драться между собой на стороне приложения.</p>\n<p>SQL-запрос через ко-рутины питона может быть в 10 раз медленнее, чем без них.</p>\n<h2 id=\"10-приятные-мелочи\" style=\"position:relative;\"><a href=\"#10-%D0%BF%D1%80%D0%B8%D1%8F%D1%82%D0%BD%D1%8B%D0%B5-%D0%BC%D0%B5%D0%BB%D0%BE%D1%87%D0%B8\" aria-label=\"10 приятные мелочи permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10. Приятные мелочи</h2>\n<p>Если запрос от веба возвращает миллион строк, то:</p>\n<ul>\n<li>он никогда не будет работать достаточно быстро для веба</li>\n<li>стоит подумать, а зачем он нужен? никто не будет читать миллион строк в браузере</li>\n</ul>\n<p>20 счетчиков с count(*) на главной странице:</p>\n<ul>\n<li>будут работать медленно</li>\n<li>точные обытно не нужны</li>\n<li>в постгресе можно написать процедуру, которая будет запрашивать данные от анализатора статистики планировщика. Они будут быстрые, но приблизительные.</li>\n</ul>","frontmatter":{"path":"/blog/video/10-ways-to-get-highload-and-bigdata/","title":"10 способов достижения HighLoad'а и BigData на ровном месте/Илья Космодемьянский"}}},"pageContext":{}},"staticQueryHashes":["3649515864"]}