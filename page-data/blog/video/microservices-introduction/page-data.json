{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/video/microservices-introduction","webpackCompilationHash":"b5e245c03e282d84e836","result":{"data":{"markdownRemark":{"html":"<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/GIslwdE2DWY\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h1>Проблемы бэкэндов крупных проектов:</h1>\n<ul>\n<li>много функциональности</li>\n<li>много кода</li>\n<li>много людей</li>\n</ul>\n<h1>Микросервисная архитектура как решение:</h1>\n<ul>\n<li>инкапсуляция: API как единственная точка входа</li>\n<li>принцип единственной ответственности</li>\n<li>скорость разработки</li>\n</ul>\n<h1>Основные паттерны MA:</h1>\n<ul>\n<li>Database per service</li>\n<li>Service Discovery - client vs server</li>\n<li>API Gateway/Backend for Frontend: обычно делается асинхронным, собирает параллельно ответы от нескольких сервисов. Уменьшает задержки засчет того, что внутри нашей сети задержки меньше, чем от клиента до сети. Позволяет не перереализовывать повторяющуюся логику в разных клиентах.</li>\n</ul>\n<h1>Требования МА:</h1>\n<ul>\n<li>качество инфраструктуры: CI, CD, мониторинг</li>\n<li>порог вхождения разработчика. Нужно более тщательно проектировать API, так как менять потом будет нельзя. Нужно заранее думать о том, какие ресурсы понадобятся для предлагаемого решения.</li>\n<li>документация</li>\n</ul>","frontmatter":{"path":"/blog/video/microservices-introduction","title":"Микросервисная Архитектура: проблемы и решения / Сергей Орлов (Avito)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}