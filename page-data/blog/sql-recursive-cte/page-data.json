{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/sql-recursive-cte","result":{"data":{"markdownRemark":{"html":"<h1 id=\"sql-recursive-cte\" style=\"position:relative;\"><a href=\"#sql-recursive-cte\" aria-label=\"sql recursive cte permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL recursive CTE</h1>\n<p>The general syntax for a recursive CTE is:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">WITH</span> cte_name <span class=\"token punctuation\">(</span>column1<span class=\"token punctuation\">,</span> column2<span class=\"token punctuation\">,</span> â€¦<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">div</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">AS</span>\n<span class=\"token punctuation\">(</span>\n\tcte_query_definition <span class=\"token comment\">-- Anchor member&lt;/div></span>\n\t<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n\tcte_query_definition <span class=\"token comment\">-- Recursive member; references cte_name.&lt;/div></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Statement using the CTE&lt;/div></span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> cte_name\n<span class=\"token keyword\">with</span> cte <span class=\"token keyword\">as</span>\n<span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> lastname<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">as</span> lev <span class=\"token keyword\">from</span> dbo<span class=\"token punctuation\">.</span>Employee <span class=\"token keyword\">where</span> ReportsTo <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span>\n\t<span class=\"token keyword\">union</span> <span class=\"token keyword\">all</span>\n\t<span class=\"token keyword\">select</span> e<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>lastname<span class=\"token punctuation\">,</span> lev <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">from</span> dbo<span class=\"token punctuation\">.</span>Employee e <span class=\"token keyword\">join</span> cte\n\t<span class=\"token keyword\">on</span> e<span class=\"token punctuation\">.</span>ReportsTo <span class=\"token operator\">=</span> cte<span class=\"token punctuation\">.</span>ID\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> lastname<span class=\"token punctuation\">,</span> lev <span class=\"token keyword\">from</span> cte</code></pre></div>","frontmatter":{"path":"/blog/sql-recursive-cte","title":"SQL recursive CTE"}}},"pageContext":{}},"staticQueryHashes":["3649515864"]}