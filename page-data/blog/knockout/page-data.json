{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/knockout","result":{"data":{"markdownRemark":{"html":"<h1 id=\"knockout\" style=\"position:relative;\"><a href=\"#knockout\" aria-label=\"knockout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Knockout</h1>\n<p>В общем-то похож на Angular. В разметке можно указывать атрибут data-bind и ему в значение указывать</p>\n<p>key-value пары, где key = text, или attr, а value = поле модели, если text, или Json с атрибутами, если attr</p>\n<p>Например</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;a data-bind=&quot;attr: { href: twitterUrl}, text: twitterAlias&quot; &gt;&lt;/a&gt;</code></pre></div>\n<p>В качестве полей модели можно указывать и функции, например:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> viewModel <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tauthorName<span class=\"token operator\">:</span> ko<span class=\"token punctuation\">.</span><span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Steve Smith'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\ttwitterAlias<span class=\"token operator\">:</span> ko<span class=\"token punctuation\">.</span><span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@ardalis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\ttwitterUrl<span class=\"token operator\">:</span> ko<span class=\"token punctuation\">.</span><span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"https://twitter.com/\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Модели привязываются командой <code class=\"language-text\">ko.applyBindings(model)</code></p>\n<p>Чтобы связь с полем модели была 2-сторонней, используется <code class=\"language-text\">ko.observable</code>, как выше.</p>","frontmatter":{"path":"/blog/knockout","title":"Knockout"}}},"pageContext":{}},"staticQueryHashes":["3649515864"]}