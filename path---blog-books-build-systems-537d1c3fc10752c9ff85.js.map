{"version":3,"sources":["webpack:///path---blog-books-build-systems-537d1c3fc10752c9ff85.js","webpack:///./.cache/json/blog-books-build-systems.json"],"names":["webpackJsonp","401","module","exports","data","markdownRemark","html","frontmatter","path","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,8/GAAmjFC,aAA6/BC,KAAA,4BAAAC,MAAA,mBAA6DC","file":"path---blog-books-build-systems-537d1c3fc10752c9ff85.js","sourcesContent":["webpackJsonp([77570552653218],{\n\n/***/ 401:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Make:</h2>\\n<p>Создается Makefile:</p>\\n<pre><code>util.o: util.h util.c\\n    gcc -c util.c\\nmain.o: util.h main.c\\n    gcc -c main.c\\nmain.exe: util.o main.o\\n    gcc util.o main.o -o main.exe\\n</code></pre>\\n<p>Если граф ацикличный, то каждый таск должен быть выполнен 0-1 раз.\\nЦикличные графы обычно не поддерживаются билд-системами.</p>\\n<p>Make: </p>\\n<ul>\\n<li>использует время модификации файла</li>\\n<li>создает граф зависимостей тасков и запускает их в топологическом порядке</li>\\n</ul>\\n<p>Такой подход удовлетворяет свойству минимальности:\\nбилд-система является <em>минимальной</em>, если она выполняет такси не больше одного раза в процессе билда и только если они транзитивно зависят от инпутов, которые изменены со времени прошлого билда.</p>\\n<h2>Excel</h2>\\n<p>Может быть рассмотрен как билд-система с динамическими меняющимися зависимостями.</p>\\n<p>Пример:</p>\\n<pre><code>    A1: 10 B1: INDIRECT(\\\"A\\\" &#x26; C1) C1: 1\\n    A2: 20\\n</code></pre>\\n<p>Так как значение B1 определяется значением C1, то невозможно построить граф зависимостей до начала билда.</p>\\n<p>Чтобы поддерживать динамические зависимости, используется <strong>calc chain</strong>:</p>\\n<p>ячейки обрабатываются в последовательности <strong>calc-chain</strong>, но если вычисление ячейки C требует значения ячейки D, которая еще не вычислена, то Excel <em>прекращает</em> вычисление C, перемещает D вперед C в <strong>calc-chain</strong> и возобновляет билд, начиная с D.</p>\\n<p>Когда значения или формулы меняются, то Excel использует финальную <strong>calc-chain</strong> из предыдущего билда и начинает с нее.</p>\\n<p>Такой подход не удовлетворяет свойству <em>минимальности</em>. B1 должен быть перевычислен только если изменяются A1 или C1, но это не очевидно. Excel использует \\\"приблизительную\\\" минимальность:\\nформула пересчитывается, если:\\n- упоминает изменившуюся ячейку\\n- использует INDIRECT, чьи зависимости не видны статически\\n- ячейка изменилась сама</p>\\n<p>То есть в нашем случае B1 будет пересчитываться всегда, а это явное нарушение минимальности.</p>\\n<h2>Shake</h2>\\n<p>Попытка удовлетворить свойству минимальности при решении проблемы динамических зависимостей.</p>\\n<p><img src=\\\"./build-systems-1.png\\\" alt=\\\"Shake example\\\"></p>\\n<p>Содержимое <code>release.tar</code> определяется содержимым <code>release.txt</code>. Makefile так не может и приходится использовать костыли типа <em>build phases</em>.</p>\\n<p>В Shake можно указать правило для <code>release.tar</code> так:</p>\\n<pre><code>\\\"release.tar\\\" %> \\\\_ -> do\\n    need [\\\"release.txt\\\"]\\n    files &#x3C;- lines &#x3C;$> readFile \\\"release.txt\\\"\\n    need files\\n    system \\\"tar\\\" $ [\\\"-cf\\\", \\\"release.tar\\\"] ++ files\\n</code></pre>\\n<p>Отличия от Make и Excel:\\n- Shake использует граф зависимости из предыдущего билда, чтобы определить, какие файлы должны быть перебилжены.\\n- вместо <em>прекращения</em> выполнения тасков, чьи зависимости пока не построены (как делает Excel), они приостанавливаются (suspend).\\n- поддерживается <em>early cutoff optimization</em>. Когда выполняется таск и результат не изменился относительно предыдущего билда, зависимые таски можно не выполнять. Make и Excel так не умеют.</p>\\n<h2>Bazel</h2>\\n<p>Облачная файловая система. Результаты билдов шарятся между членами команды. Локально появляются только конечные результаты, а все промежуточные остаются в облаке.</p>\\n<p>Пример (в кружках - хэши от содержания):</p>\\n<p><img src=\\\"./build-systems-2.png\\\" alt=\\\"Bazel example\\\"></p>\\n<h2>Сравнение систем</h2>\\n<p><img src=\\\"./build-systems-3.png\\\" alt=\\\"Build systems comparison\\\"></p>\",\"frontmatter\":{\"path\":\"/blog/books/build-systems\",\"title\":\"build-systems\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-books-build-systems-537d1c3fc10752c9ff85.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Make:</h2>\\n<p>Создается Makefile:</p>\\n<pre><code>util.o: util.h util.c\\n    gcc -c util.c\\nmain.o: util.h main.c\\n    gcc -c main.c\\nmain.exe: util.o main.o\\n    gcc util.o main.o -o main.exe\\n</code></pre>\\n<p>Если граф ацикличный, то каждый таск должен быть выполнен 0-1 раз.\\nЦикличные графы обычно не поддерживаются билд-системами.</p>\\n<p>Make: </p>\\n<ul>\\n<li>использует время модификации файла</li>\\n<li>создает граф зависимостей тасков и запускает их в топологическом порядке</li>\\n</ul>\\n<p>Такой подход удовлетворяет свойству минимальности:\\nбилд-система является <em>минимальной</em>, если она выполняет такси не больше одного раза в процессе билда и только если они транзитивно зависят от инпутов, которые изменены со времени прошлого билда.</p>\\n<h2>Excel</h2>\\n<p>Может быть рассмотрен как билд-система с динамическими меняющимися зависимостями.</p>\\n<p>Пример:</p>\\n<pre><code>    A1: 10 B1: INDIRECT(\\\"A\\\" &#x26; C1) C1: 1\\n    A2: 20\\n</code></pre>\\n<p>Так как значение B1 определяется значением C1, то невозможно построить граф зависимостей до начала билда.</p>\\n<p>Чтобы поддерживать динамические зависимости, используется <strong>calc chain</strong>:</p>\\n<p>ячейки обрабатываются в последовательности <strong>calc-chain</strong>, но если вычисление ячейки C требует значения ячейки D, которая еще не вычислена, то Excel <em>прекращает</em> вычисление C, перемещает D вперед C в <strong>calc-chain</strong> и возобновляет билд, начиная с D.</p>\\n<p>Когда значения или формулы меняются, то Excel использует финальную <strong>calc-chain</strong> из предыдущего билда и начинает с нее.</p>\\n<p>Такой подход не удовлетворяет свойству <em>минимальности</em>. B1 должен быть перевычислен только если изменяются A1 или C1, но это не очевидно. Excel использует \\\"приблизительную\\\" минимальность:\\nформула пересчитывается, если:\\n- упоминает изменившуюся ячейку\\n- использует INDIRECT, чьи зависимости не видны статически\\n- ячейка изменилась сама</p>\\n<p>То есть в нашем случае B1 будет пересчитываться всегда, а это явное нарушение минимальности.</p>\\n<h2>Shake</h2>\\n<p>Попытка удовлетворить свойству минимальности при решении проблемы динамических зависимостей.</p>\\n<p><img src=\\\"./build-systems-1.png\\\" alt=\\\"Shake example\\\"></p>\\n<p>Содержимое <code>release.tar</code> определяется содержимым <code>release.txt</code>. Makefile так не может и приходится использовать костыли типа <em>build phases</em>.</p>\\n<p>В Shake можно указать правило для <code>release.tar</code> так:</p>\\n<pre><code>\\\"release.tar\\\" %> \\\\_ -> do\\n    need [\\\"release.txt\\\"]\\n    files &#x3C;- lines &#x3C;$> readFile \\\"release.txt\\\"\\n    need files\\n    system \\\"tar\\\" $ [\\\"-cf\\\", \\\"release.tar\\\"] ++ files\\n</code></pre>\\n<p>Отличия от Make и Excel:\\n- Shake использует граф зависимости из предыдущего билда, чтобы определить, какие файлы должны быть перебилжены.\\n- вместо <em>прекращения</em> выполнения тасков, чьи зависимости пока не построены (как делает Excel), они приостанавливаются (suspend).\\n- поддерживается <em>early cutoff optimization</em>. Когда выполняется таск и результат не изменился относительно предыдущего билда, зависимые таски можно не выполнять. Make и Excel так не умеют.</p>\\n<h2>Bazel</h2>\\n<p>Облачная файловая система. Результаты билдов шарятся между членами команды. Локально появляются только конечные результаты, а все промежуточные остаются в облаке.</p>\\n<p>Пример (в кружках - хэши от содержания):</p>\\n<p><img src=\\\"./build-systems-2.png\\\" alt=\\\"Bazel example\\\"></p>\\n<h2>Сравнение систем</h2>\\n<p><img src=\\\"./build-systems-3.png\\\" alt=\\\"Build systems comparison\\\"></p>\",\"frontmatter\":{\"path\":\"/blog/books/build-systems\",\"title\":\"build-systems\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-books-build-systems.json\n// module id = 401\n// module chunks = 77570552653218"],"sourceRoot":""}