webpackJsonp([0x8241867fb038],{455:function(e,n){e.exports={data:{markdownRemark:{html:"<h1>NodeJS</h1>\n<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-a-centos-7-server\">Установка на машину без интернета</a></p>\n<p><a href=\"http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb\">http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb</a> - объяснение, что такое single threaded event-loop в NodeJS</p>\n<p><strong>В NodeJS все работает параллельно кроме пользовательского кода.</strong></p>\n<h2>Минимальное приложение:</h2>\n<pre><code class=\"language-js\">'use strict';\nvar http = require('http');\nvar app = http.createServer(handler);\napp.listen(process.env.PORT || 3000);\nfunction handler (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('It\\'s alive!');\n}\n</code></pre>\n<h2>Прокси</h2>\n<pre><code class=\"language-js\">var http = require('http');\n\nconst wrappedApi = \"http://192.168.1.3:8089\";\n\nconst proxy = http.createServer((req, clientRes) => {\n    const srvUrl = new URL(req.url, wrappedApi);\n    const proxyRequest = http.request(srvUrl, req, function (wrappedResponse) {\n        clientRes.writeHead(wrappedResponse.statusCode, wrappedResponse.headers);\n        wrappedResponse.pipe(clientRes, {\n            end: true\n        });\n    });\n    req.pipe(proxyRequest, {\n        end: true\n    });\n});\n\nproxy.listen(9091);\n</code></pre>",frontmatter:{path:"/blog/nodejs",title:"NodeJS"}}},pathContext:{}}}});
//# sourceMappingURL=path---blog-nodejs-a4db1ba11ab71d87a276.js.map