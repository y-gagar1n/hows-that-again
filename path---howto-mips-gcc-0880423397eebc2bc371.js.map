{"version":3,"sources":["webpack:///path---howto-mips-gcc-0880423397eebc2bc371.js","webpack:///./.cache/json/howto-mips-gcc.json"],"names":["webpackJsonp","504","module","exports","data","markdownRemark","html","frontmatter","path","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,gyGAAowGC,aAA8DC,KAAA,kBAAAC,MAAA,qDAAqFC","file":"path---howto-mips-gcc-0880423397eebc2bc371.js","sourcesContent":["webpackJsonp([92226880614288],{\n\n/***/ 504:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Как сбилдить GCC для компиляции под MIPS на OS X</h1>\\n<p>Для начала устанавливаем gcc нужной версии:</p>\\n<pre><code class=\\\"language-shell\\\">sudo chown -R $(whoami) /usr/local/share/man/man8. # почему-то без этой строчки brew ругался\\nbrew install gcc@4.9\\n</code></pre>\\n<p>Brew устанавливает все в свою папку <code>/usr/local/Cellar/</code>, после чего делает симлинки в папке <code>/usr/loca/bin</code>.</p>\\n<p>Таким образом, после установки gcc@4.9 в папке <code>/usr/local/bin</code> появятся бинарники <strong>gcc-4.9</strong>, <strong>g++-4.9</strong>, <strong>cpp-4.9</strong> и прочие, которые будут симлинками в папку <code>/usr/local/Cellar/gcc@4.9/4.9.4_1/bin</code>.</p>\\n<p>Теперь мы используем их, чтобы сбилдить <code>binutils</code> под MIPS, но сначала выставим соответствующие переменные окружения:</p>\\n<pre><code class=\\\"language-shell\\\">export CC=$(which gcc-4.9)\\nexport CXX=$(which g++-4.9)\\nexport CPP=$(which cpp-4.9)\\nexport LD=$(which gcc-4.9)\\nexport PREFIX=/opt/cross/gcc-mips\\nexport CFLAGS=-Wno-error=deprecated-declarations\\nexport CPPFLAGS=-Wno-error=unused-value\\nexport CPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/ \\n</code></pre>\\n<p>Здесь важно обратить внимание на:</p>\\n<ul>\\n<li><code>PREFIX</code>: путь установки</li>\\n<li><code>CPATH</code>: папка инклюдов для компиляторов С и С++. В указанной папке хранятся все системные заголовки после установки XCode. Без указания этой переменной компиляция ругалась на ненайденный <code>stdio.h</code></li>\\n<li><code>CFLAGS</code>, <code>CPPFLAGS</code>: замалчивают некоторые варнинги, чтобы они не приводили к ошибкам. Иначе не билдится.</li>\\n</ul>\\n<p>Теперь непосредственно качаем и билдим binutils:</p>\\n<pre><code class=\\\"language-shell\\\">wget ftp://sourceware.org/pub/binutils/releases/binutils-2.24.tar.gz\\n\\ntar xzf binutils-2.24.tar.gz\\nmkdir binutils-build\\ncd binutils-build\\n\\n../binutils-2.24/configure --target=mips-netbsd-elf --prefix=$PREFIX\\nmake all 2>&#x26;1 | tee make.log\\nsudo make install\\n</code></pre>\\n<p>После установки в папке <code>/opt/cross/gcc-mips/bin</code> будут лежать утилиты binutils, скомпилированные под MIPS. Этот адрес добавляем в PATH:</p>\\n<pre><code class=\\\"language-shell\\\">export PATH=${PREFIX}/bin:${PATH}\\n</code></pre>\\n<p>Дальше компилируем gcc:</p>\\n<pre><code class=\\\"language-shell\\\">wget http://www.netgull.com/gcc/releases/gcc-4.8.2/gcc-4.8.2.tar.gz  \\ntar xzf gcc-4.8.2.tar.gz\\ncd gcc-4.8.2\\n./contrib/download_prerequisites\\ncd ..\\nmkdir gcc-build\\ncd gcc-build\\n../gcc-4.8.2/configure --target=mips-netbsd-elf --prefix=$PREFIX --with-newlib --without-headers --with-gnu-as --with-gnu-ld --disable-shared --enable-languages=c\\nmake all-gcc 2>&#x26;1 | tee make.log\\nmake install-gcc\\n</code></pre>\\n<p>После установки в папке <code>/opt/cross/gcc-mips/bin</code>, помимо утилит binutils, будут еще и утилиты gcc, скомпилированные под MIPS.</p>\\n<p>Теперь нам нужно установить <strong>newlib</strong> - реализация стандартной библиотеки языка C для встраиваемых системах:</p>\\n<pre><code class=\\\"language-shell\\\">wget ftp://sourceware.org/pub/newlib/newlib-2.1.0.tar.gz\\ntar xzf newlib-2.1.0.tar.gz\\nmkdir newlib-build\\ncd newlib-build\\n\\nexport CPATH=\\n\\n../newlib-2.1.0/configure --target=mips-netbsd-elf --prefix=$PREFIX\\nmake all 2>&#x26;1 | tee make.log\\nmake install\\n</code></pre>\",\"frontmatter\":{\"path\":\"/howto/mips-gcc\",\"title\":\"Как сбилдить GCC для компилции под MIPS на OS X\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---howto-mips-gcc-0880423397eebc2bc371.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Как сбилдить GCC для компиляции под MIPS на OS X</h1>\\n<p>Для начала устанавливаем gcc нужной версии:</p>\\n<pre><code class=\\\"language-shell\\\">sudo chown -R $(whoami) /usr/local/share/man/man8. # почему-то без этой строчки brew ругался\\nbrew install gcc@4.9\\n</code></pre>\\n<p>Brew устанавливает все в свою папку <code>/usr/local/Cellar/</code>, после чего делает симлинки в папке <code>/usr/loca/bin</code>.</p>\\n<p>Таким образом, после установки gcc@4.9 в папке <code>/usr/local/bin</code> появятся бинарники <strong>gcc-4.9</strong>, <strong>g++-4.9</strong>, <strong>cpp-4.9</strong> и прочие, которые будут симлинками в папку <code>/usr/local/Cellar/gcc@4.9/4.9.4_1/bin</code>.</p>\\n<p>Теперь мы используем их, чтобы сбилдить <code>binutils</code> под MIPS, но сначала выставим соответствующие переменные окружения:</p>\\n<pre><code class=\\\"language-shell\\\">export CC=$(which gcc-4.9)\\nexport CXX=$(which g++-4.9)\\nexport CPP=$(which cpp-4.9)\\nexport LD=$(which gcc-4.9)\\nexport PREFIX=/opt/cross/gcc-mips\\nexport CFLAGS=-Wno-error=deprecated-declarations\\nexport CPPFLAGS=-Wno-error=unused-value\\nexport CPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/ \\n</code></pre>\\n<p>Здесь важно обратить внимание на:</p>\\n<ul>\\n<li><code>PREFIX</code>: путь установки</li>\\n<li><code>CPATH</code>: папка инклюдов для компиляторов С и С++. В указанной папке хранятся все системные заголовки после установки XCode. Без указания этой переменной компиляция ругалась на ненайденный <code>stdio.h</code></li>\\n<li><code>CFLAGS</code>, <code>CPPFLAGS</code>: замалчивают некоторые варнинги, чтобы они не приводили к ошибкам. Иначе не билдится.</li>\\n</ul>\\n<p>Теперь непосредственно качаем и билдим binutils:</p>\\n<pre><code class=\\\"language-shell\\\">wget ftp://sourceware.org/pub/binutils/releases/binutils-2.24.tar.gz\\n\\ntar xzf binutils-2.24.tar.gz\\nmkdir binutils-build\\ncd binutils-build\\n\\n../binutils-2.24/configure --target=mips-netbsd-elf --prefix=$PREFIX\\nmake all 2>&#x26;1 | tee make.log\\nsudo make install\\n</code></pre>\\n<p>После установки в папке <code>/opt/cross/gcc-mips/bin</code> будут лежать утилиты binutils, скомпилированные под MIPS. Этот адрес добавляем в PATH:</p>\\n<pre><code class=\\\"language-shell\\\">export PATH=${PREFIX}/bin:${PATH}\\n</code></pre>\\n<p>Дальше компилируем gcc:</p>\\n<pre><code class=\\\"language-shell\\\">wget http://www.netgull.com/gcc/releases/gcc-4.8.2/gcc-4.8.2.tar.gz  \\ntar xzf gcc-4.8.2.tar.gz\\ncd gcc-4.8.2\\n./contrib/download_prerequisites\\ncd ..\\nmkdir gcc-build\\ncd gcc-build\\n../gcc-4.8.2/configure --target=mips-netbsd-elf --prefix=$PREFIX --with-newlib --without-headers --with-gnu-as --with-gnu-ld --disable-shared --enable-languages=c\\nmake all-gcc 2>&#x26;1 | tee make.log\\nmake install-gcc\\n</code></pre>\\n<p>После установки в папке <code>/opt/cross/gcc-mips/bin</code>, помимо утилит binutils, будут еще и утилиты gcc, скомпилированные под MIPS.</p>\\n<p>Теперь нам нужно установить <strong>newlib</strong> - реализация стандартной библиотеки языка C для встраиваемых системах:</p>\\n<pre><code class=\\\"language-shell\\\">wget ftp://sourceware.org/pub/newlib/newlib-2.1.0.tar.gz\\ntar xzf newlib-2.1.0.tar.gz\\nmkdir newlib-build\\ncd newlib-build\\n\\nexport CPATH=\\n\\n../newlib-2.1.0/configure --target=mips-netbsd-elf --prefix=$PREFIX\\nmake all 2>&#x26;1 | tee make.log\\nmake install\\n</code></pre>\",\"frontmatter\":{\"path\":\"/howto/mips-gcc\",\"title\":\"Как сбилдить GCC для компилции под MIPS на OS X\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/howto-mips-gcc.json\n// module id = 504\n// module chunks = 92226880614288"],"sourceRoot":""}