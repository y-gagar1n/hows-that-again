{"version":3,"sources":["webpack:///path---blog-knockout-7c4cfbd4a1c286e3ac1b.js","webpack:///./.cache/json/blog-knockout.json"],"names":["webpackJsonp","455","module","exports","data","markdownRemark","html","frontmatter","path","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,62BAAkrBC,aAAmNC,KAAA,iBAAAC,MAAA,cAA6CC","file":"path---blog-knockout-7c4cfbd4a1c286e3ac1b.js","sourcesContent":["webpackJsonp([197411268609348],{\n\n/***/ 455:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Knockout</h1>\\n<p>В общем-то похож на Angular. В разметке можно указывать атрибут data-bind и ему в значение указывать</p>\\n<p>key-value пары, где key = text, или attr, а value = поле модели, если text, или Json с атрибутами, если attr</p>\\n<p>Например</p>\\n<pre><code>&#x3C;a data-bind=\\\"attr: { href: twitterUrl}, text: twitterAlias\\\" >&#x3C;/a>\\n</code></pre>\\n<p>В качестве полей модели можно указывать и функции, например:</p>\\n<pre><code class=\\\"language-js\\\">var viewModel = {\\n    authorName: ko.observable('Steve Smith'),\\n    twitterAlias: ko.observable('@ardalis'),\\n    twitterUrl: ko.computed(function() {\\n        return \\\"https://twitter.com/\\\";\\n    }, this)\\n};\\n</code></pre>\\n<p>Модели привязываются командой <code>ko.applyBindings(model)</code></p>\\n<p>Чтобы связь с полем модели была 2-сторонней, используется <code>ko.observable</code>, как выше.</p>\",\"frontmatter\":{\"path\":\"/blog/knockout\",\"title\":\"Knockout\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-knockout-7c4cfbd4a1c286e3ac1b.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Knockout</h1>\\n<p>В общем-то похож на Angular. В разметке можно указывать атрибут data-bind и ему в значение указывать</p>\\n<p>key-value пары, где key = text, или attr, а value = поле модели, если text, или Json с атрибутами, если attr</p>\\n<p>Например</p>\\n<pre><code>&#x3C;a data-bind=\\\"attr: { href: twitterUrl}, text: twitterAlias\\\" >&#x3C;/a>\\n</code></pre>\\n<p>В качестве полей модели можно указывать и функции, например:</p>\\n<pre><code class=\\\"language-js\\\">var viewModel = {\\n    authorName: ko.observable('Steve Smith'),\\n    twitterAlias: ko.observable('@ardalis'),\\n    twitterUrl: ko.computed(function() {\\n        return \\\"https://twitter.com/\\\";\\n    }, this)\\n};\\n</code></pre>\\n<p>Модели привязываются командой <code>ko.applyBindings(model)</code></p>\\n<p>Чтобы связь с полем модели была 2-сторонней, используется <code>ko.observable</code>, как выше.</p>\",\"frontmatter\":{\"path\":\"/blog/knockout\",\"title\":\"Knockout\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-knockout.json\n// module id = 455\n// module chunks = 197411268609348"],"sourceRoot":""}