{"version":3,"sources":["webpack:///path---blog-java-c1052aeaac33bb5e3a0c.js","webpack:///./.cache/json/blog-java.json"],"names":["webpackJsonp","453","module","exports","data","markdownRemark","html","frontmatter","path","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,wsdAAk9dC,aAAsYC,KAAA,aAAAC,MAAA,UAAqCC","file":"path---blog-java-c1052aeaac33bb5e3a0c.js","sourcesContent":["webpackJsonp([53396112491056],{\n\n/***/ 453:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Запрос сетевого ресурса</h1>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token class-name\\\">URL</span> url <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token function\\\">URL</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"https://adventofcode.com/2018/day/1/input\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">HttpURLConnection</span> conn <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">HttpURLConnection</span><span class=\\\"token punctuation\\\">)</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">openConnection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">InputStream</span> stream<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    stream <span class=\\\"token operator\\\">=</span> conn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getInputStream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IOException</span> e<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    stream <span class=\\\"token operator\\\">=</span> conn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getErrorStream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// без этого, в случае HTTP-статуса, отличного от 200, мы получим просто исключение и не сможем получить тело ответа</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token class-name\\\">InputStreamReader</span> reader <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InputStreamReader</span><span class=\\\"token punctuation\\\">(</span>stream<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">BufferedReader</span> in <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BufferedReader</span><span class=\\\"token punctuation\\\">(</span>reader<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token class-name\\\">String</span> inputLine<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>inputLine <span class=\\\"token operator\\\">=</span> in<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>inputLine<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>Если нужно обратиться к HTTPS, то нужно <code class=\\\"language-text\\\">HttpURLConnection</code> просто заменить на <code class=\\\"language-text\\\">HttpsURLConnection</code>.</p>\\n<p>Если нужно использовать прокси, то делаем так:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token class-name\\\">HttpsURLConnection</span> conn <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">HttpsURLConnection</span><span class=\\\"token punctuation\\\">)</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">openConnection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Type</span><span class=\\\"token punctuation\\\">.</span>HTTP<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InetSocketAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"192.168.2.102\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3128</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>Добавить заголовок можно так:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">conn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setRequestProperty</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"cookie\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"COOKIE_CONTENTS\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<h1>Работа с I/O</h1>\\n<p>В Java NIO основные концепции - каналы и буферы. При чтении данных каналы читают их из источника в буффер. При записи - буфер пишет в канал.</p>\\n<h2>Каналы</h2>\\n<p>Самые важные реализации каналов:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">FileChannel</code> - работает с файлами</li>\\n<li><code class=\\\"language-text\\\">DatagramChannel</code> - работает с UDP</li>\\n<li><code class=\\\"language-text\\\">SocketChannel</code> - работает с TCP</li>\\n<li><code class=\\\"language-text\\\">ServerSocketChannel</code> - работает с входящими TCP-соединениями, для каждого входящего соединения создается <code class=\\\"language-text\\\">SocketChannel</code>.</li>\\n</ul>\\n<p>Пример использования <code class=\\\"language-text\\\">FileChannel</code>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token class-name\\\">RandomAccessFile</span> aFile <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RandomAccessFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"data/nio-data.txt\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"rw\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">FileChannel</span> inChannel <span class=\\\"token operator\\\">=</span> aFile<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getChannel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token class-name\\\">ByteBuffer</span> buf <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">ByteBuffer</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">allocate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">int</span> bytesRead <span class=\\\"token operator\\\">=</span> inChannel<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">read</span><span class=\\\"token punctuation\\\">(</span>buf<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>bytesRead <span class=\\\"token operator\\\">!=</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Read \\\"</span> <span class=\\\"token operator\\\">+</span> bytesRead<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">flip</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasRemaining</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">char</span><span class=\\\"token punctuation\\\">)</span> buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">clear</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  bytesRead <span class=\\\"token operator\\\">=</span> inChannel<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">read</span><span class=\\\"token punctuation\\\">(</span>buf<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\naFile<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>Строка <code class=\\\"language-text\\\">buf.flip()</code> очень важна - она переводит буфер из режима записи <strong>в</strong> буфер в режим чтения <strong>из</strong> буфера.</p>\\n<h2>Буферы</h2>\\n<p>Работа с буфером состоит из 4 шагов:</p>\\n<ol>\\n<li>Пишем данные в буфер</li>\\n<li>Вызываем <code class=\\\"language-text\\\">buffer.flip()</code></li>\\n<li>Читаем данные из буфера</li>\\n<li>Вызываем <code class=\\\"language-text\\\">buffer.clear()</code> или <code class=\\\"language-text\\\">buffer.compact()</code>.</li>\\n</ol>\\n<p>Основные реализации буферов:</p>\\n<ul>\\n<li>ByteBuffer</li>\\n<li>MappedByteBuffer</li>\\n<li>CharBuffer</li>\\n<li>DoubleBuffer</li>\\n<li>FloatBuffer</li>\\n<li>IntBuffer</li>\\n<li>LongBuffer</li>\\n<li>ShortBuffer</li>\\n</ul>\\n<h3>Создание буфера</h3>\\n<p>Каждый класс-наследник <code class=\\\"language-text\\\">Buffer</code> имеет метод <code class=\\\"language-text\\\">allocate()</code>, который аллоцирует новый буфер:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token class-name\\\">ByteBuffer</span> buf <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">ByteBuffer</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">allocate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">CharBuffer</span> buf2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">CharBuffer</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">allocate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<h3>Запись данных в буфер</h3>\\n<p>В буфер можно записать данные 2 способами:</p>\\n<ol>\\n<li>Через канал</li>\\n<li>Вручную</li>\\n</ol>\\n<p>Вот пример записи через канал:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">int</span> bytesRead <span class=\\\"token operator\\\">=</span> inChannel<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">read</span><span class=\\\"token punctuation\\\">(</span>buf<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>А вот - вручную:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">127</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>У <code class=\\\"language-text\\\">put()</code> есть много перегрузок, можно писать одно значение, массив значений, и даже значения из другого буфера.</p>\\n<h3>Чтение данных из буфера</h3>\\n<p>Так же как и с записью, есть 2 способа.</p>\\n<p>Читать из буфера в канал:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">int</span> bytesWritten <span class=\\\"token operator\\\">=</span> inChannel<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span>buf<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>Читать из буфера в переменную:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">byte</span> aByte <span class=\\\"token operator\\\">=</span> buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<h3>Очистка буфера</h3>\\n<p>При вызове <code class=\\\"language-text\\\">clear()</code> внутренний <code class=\\\"language-text\\\">position</code> выставляется в 0, а <code class=\\\"language-text\\\">limit</code> - в <code class=\\\"language-text\\\">capacity</code>. Это означает, что данные не очищаются, но следующая запись будет поверх старых данных.</p>\",\"frontmatter\":{\"path\":\"/blog/java\",\"title\":\"Java\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-java-c1052aeaac33bb5e3a0c.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Запрос сетевого ресурса</h1>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token class-name\\\">URL</span> url <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token function\\\">URL</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"https://adventofcode.com/2018/day/1/input\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">HttpURLConnection</span> conn <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">HttpURLConnection</span><span class=\\\"token punctuation\\\">)</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">openConnection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">InputStream</span> stream<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    stream <span class=\\\"token operator\\\">=</span> conn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getInputStream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IOException</span> e<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    stream <span class=\\\"token operator\\\">=</span> conn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getErrorStream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// без этого, в случае HTTP-статуса, отличного от 200, мы получим просто исключение и не сможем получить тело ответа</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token class-name\\\">InputStreamReader</span> reader <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InputStreamReader</span><span class=\\\"token punctuation\\\">(</span>stream<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">BufferedReader</span> in <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BufferedReader</span><span class=\\\"token punctuation\\\">(</span>reader<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token class-name\\\">String</span> inputLine<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>inputLine <span class=\\\"token operator\\\">=</span> in<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readLine</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>inputLine<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>Если нужно обратиться к HTTPS, то нужно <code class=\\\"language-text\\\">HttpURLConnection</code> просто заменить на <code class=\\\"language-text\\\">HttpsURLConnection</code>.</p>\\n<p>Если нужно использовать прокси, то делаем так:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token class-name\\\">HttpsURLConnection</span> conn <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">HttpsURLConnection</span><span class=\\\"token punctuation\\\">)</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">openConnection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Type</span><span class=\\\"token punctuation\\\">.</span>HTTP<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">InetSocketAddress</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"192.168.2.102\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3128</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>Добавить заголовок можно так:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">conn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setRequestProperty</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"cookie\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"COOKIE_CONTENTS\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<h1>Работа с I/O</h1>\\n<p>В Java NIO основные концепции - каналы и буферы. При чтении данных каналы читают их из источника в буффер. При записи - буфер пишет в канал.</p>\\n<h2>Каналы</h2>\\n<p>Самые важные реализации каналов:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">FileChannel</code> - работает с файлами</li>\\n<li><code class=\\\"language-text\\\">DatagramChannel</code> - работает с UDP</li>\\n<li><code class=\\\"language-text\\\">SocketChannel</code> - работает с TCP</li>\\n<li><code class=\\\"language-text\\\">ServerSocketChannel</code> - работает с входящими TCP-соединениями, для каждого входящего соединения создается <code class=\\\"language-text\\\">SocketChannel</code>.</li>\\n</ul>\\n<p>Пример использования <code class=\\\"language-text\\\">FileChannel</code>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token class-name\\\">RandomAccessFile</span> aFile <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RandomAccessFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"data/nio-data.txt\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"rw\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">FileChannel</span> inChannel <span class=\\\"token operator\\\">=</span> aFile<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getChannel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token class-name\\\">ByteBuffer</span> buf <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">ByteBuffer</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">allocate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">int</span> bytesRead <span class=\\\"token operator\\\">=</span> inChannel<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">read</span><span class=\\\"token punctuation\\\">(</span>buf<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>bytesRead <span class=\\\"token operator\\\">!=</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Read \\\"</span> <span class=\\\"token operator\\\">+</span> bytesRead<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">flip</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasRemaining</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">char</span><span class=\\\"token punctuation\\\">)</span> buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">clear</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  bytesRead <span class=\\\"token operator\\\">=</span> inChannel<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">read</span><span class=\\\"token punctuation\\\">(</span>buf<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\naFile<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>Строка <code class=\\\"language-text\\\">buf.flip()</code> очень важна - она переводит буфер из режима записи <strong>в</strong> буфер в режим чтения <strong>из</strong> буфера.</p>\\n<h2>Буферы</h2>\\n<p>Работа с буфером состоит из 4 шагов:</p>\\n<ol>\\n<li>Пишем данные в буфер</li>\\n<li>Вызываем <code class=\\\"language-text\\\">buffer.flip()</code></li>\\n<li>Читаем данные из буфера</li>\\n<li>Вызываем <code class=\\\"language-text\\\">buffer.clear()</code> или <code class=\\\"language-text\\\">buffer.compact()</code>.</li>\\n</ol>\\n<p>Основные реализации буферов:</p>\\n<ul>\\n<li>ByteBuffer</li>\\n<li>MappedByteBuffer</li>\\n<li>CharBuffer</li>\\n<li>DoubleBuffer</li>\\n<li>FloatBuffer</li>\\n<li>IntBuffer</li>\\n<li>LongBuffer</li>\\n<li>ShortBuffer</li>\\n</ul>\\n<h3>Создание буфера</h3>\\n<p>Каждый класс-наследник <code class=\\\"language-text\\\">Buffer</code> имеет метод <code class=\\\"language-text\\\">allocate()</code>, который аллоцирует новый буфер:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token class-name\\\">ByteBuffer</span> buf <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">ByteBuffer</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">allocate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">CharBuffer</span> buf2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">CharBuffer</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">allocate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<h3>Запись данных в буфер</h3>\\n<p>В буфер можно записать данные 2 способами:</p>\\n<ol>\\n<li>Через канал</li>\\n<li>Вручную</li>\\n</ol>\\n<p>Вот пример записи через канал:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">int</span> bytesRead <span class=\\\"token operator\\\">=</span> inChannel<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">read</span><span class=\\\"token punctuation\\\">(</span>buf<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>А вот - вручную:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">127</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>У <code class=\\\"language-text\\\">put()</code> есть много перегрузок, можно писать одно значение, массив значений, и даже значения из другого буфера.</p>\\n<h3>Чтение данных из буфера</h3>\\n<p>Так же как и с записью, есть 2 способа.</p>\\n<p>Читать из буфера в канал:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">int</span> bytesWritten <span class=\\\"token operator\\\">=</span> inChannel<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span>buf<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<p>Читать из буфера в переменную:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">byte</span> aByte <span class=\\\"token operator\\\">=</span> buf<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\\n<h3>Очистка буфера</h3>\\n<p>При вызове <code class=\\\"language-text\\\">clear()</code> внутренний <code class=\\\"language-text\\\">position</code> выставляется в 0, а <code class=\\\"language-text\\\">limit</code> - в <code class=\\\"language-text\\\">capacity</code>. Это означает, что данные не очищаются, но следующая запись будет поверх старых данных.</p>\",\"frontmatter\":{\"path\":\"/blog/java\",\"title\":\"Java\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-java.json\n// module id = 453\n// module chunks = 53396112491056"],"sourceRoot":""}